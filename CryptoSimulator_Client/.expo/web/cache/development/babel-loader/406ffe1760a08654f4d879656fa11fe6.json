{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState, useEffect } from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\n\nvar Predictions = function (_React$Component) {\n  _inherits(Predictions, _React$Component);\n\n  var _super = _createSuper(Predictions);\n\n  function Predictions(props) {\n    var _this;\n\n    _classCallCheck(this, Predictions);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      contatore: 0\n    };\n    return _this;\n  }\n\n  _createClass(Predictions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 7\n        }\n      }, React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }\n      }, \"Hai cliccato \", this.state.contatore, \" volte\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.setState({\n            contatore: _this2.state.contatore + 1\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      }, \"Cliccami\"));\n    }\n  }]);\n\n  return Predictions;\n}(React.Component);\n\nexport { Predictions as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f3ffff',\n    alignItems: 'center',\n    justifyContent: 'from-start',\n    paddingTop: 30\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    height: '30%',\n    borderRadius: 10,\n    padding: 10,\n    textAlign: 'left',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3.84,\n    elevation: 1\n  },\n  chartText: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["StatusBar","React","useState","useEffect","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","AppLoading","firebase","Predictions","props","state","contatore","setState","Component","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","paddingTop","chartContainer","width","height","borderRadius","padding","textAlign","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","chartText","fontFamily","fontSize","color","text"],"mappings":";;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAO,8BAAP;;;;AAEA,OAAOC,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,kBAArC,EAAyDC,iBAAzD,EAA4EC,mBAA5E,QAAsG,4BAAtG;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,oBAAP;;IAGqBC,W;;;;;AACnB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE;AADA,KAAb;AAFiB;AAKlB;;;;6BAEQ;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiB,KAAKD,KAAL,CAAWC,SAA5B,WADF,EAEE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,QAAL,CAAc;AAAED,YAAAA,SAAS,EAAE,MAAI,CAACD,KAAL,CAAWC,SAAX,GAAuB;AAApC,WAAd,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF;AAQD;;;;EAjBsCb,KAAK,CAACe,S;;SAA1BL,W;AAmErB,IAAMM,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAC,CADI;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE,YAJP;AAKTC,IAAAA,UAAU,EAAE;AALH,GADoB;AAQ/BC,EAAAA,cAAc,EAAE;AACdJ,IAAAA,eAAe,EAAE,SADH;AAEdK,IAAAA,KAAK,EAAE,KAFO;AAGdC,IAAAA,MAAM,EAAE,KAHM;AAIdC,IAAAA,YAAY,EAAE,EAJA;AAKdC,IAAAA,OAAO,EAAE,EALK;AAMdC,IAAAA,SAAS,EAAE,MANG;AAOdC,IAAAA,WAAW,EAAE,MAPC;AAQdC,IAAAA,YAAY,EAAE;AACZN,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,MAAM,EAAE;AAFI,KARA;AAYdM,IAAAA,aAAa,EAAE,GAZD;AAadC,IAAAA,YAAY,EAAE,IAbA;AAcdC,IAAAA,SAAS,EAAE;AAdG,GARe;AAwB/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE,mBADH;AAETC,IAAAA,QAAQ,EAAE,EAFD;AAGTC,IAAAA,KAAK,EAAE;AAHE,GAxBoB;AA6B/BC,EAAAA,IAAI,EAAE;AACJH,IAAAA,UAAU,EAAE,qBADR;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,KAAK,EAAE;AAHH;AA7ByB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport { StyleSheet, Text, View } from 'react-native';\nimport React, {useState,useEffect} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\n\n\nexport default class Predictions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contatore: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Hai cliccato {this.state.contatore} volte</p>\n        <button onClick={() => this.setState({ contatore: this.state.contatore + 1 })}>\n          Cliccami\n        </button>\n      </div>\n    );\n  }\n}\n\n/*export default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  let cryptoData;\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({asset: 'bitcoin', start: '2020-01-01', end: '2020-02-01', interval: '1d'}).then(response =>{\n      cryptoData = response;\n      setLoading(false);\n    }).catch(error =>{\n      console.error(error);\n    })\n  }})\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      console.log(\"CRYPTODATA: \", cryptoData);\n      return (\n        <View style={styles.container}>\n          <View style={styles.chartContainer}>\n            <Text style={styles.chartText}>{}</Text>\n          </View>\n        </View>\n      );\n    }\n    else{\n      return(\n        <View style={styles.container}>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};*/\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    backgroundColor: '#f3ffff',\n    alignItems: 'center',\n    justifyContent: 'from-start',\n    paddingTop: 30\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    height: '30%',\n    borderRadius: 10,\n    padding: 10,\n    textAlign: 'left',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3.84,\n    elevation: 1,\n  },\n  chartText: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}
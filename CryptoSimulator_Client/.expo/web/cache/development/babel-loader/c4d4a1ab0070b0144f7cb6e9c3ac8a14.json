{"ast":null,"code":"var _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/MyTabBar.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#e9f0ff'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30\n  },\n  appbar: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 15\n  }\n});\nexport default function MyTabBar(_ref) {\n  var _this = this;\n\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation;\n  return React.createElement(View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      flexDirection: 'row',\n      borderRadius: 20,\n      marginRight: 10,\n      marginLeft: 10,\n      backgroundColor: '#111111',\n      shadowColor: '#666',\n      shadowOffset: {\n        width: 2,\n        height: 2\n      },\n      shadowOpacity: 0.5,\n      shadowRadius: 2,\n      elevation: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        navigation.navigate(route.name);\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    var getIcon = function getIcon(label) {\n      if (label == 'Account') return \"user\";\n      if (label == 'CryptoList') return \"btc\";\n      if (label == 'Predictions') return \"line-chart\";\n      if (label == 'Statistics') return \"signal\";\n    };\n\n    return React.createElement(TouchableOpacity, {\n      accessibilityRole: \"button\",\n      activeOpacity: 1,\n      accessibilityState: isFocused ? {\n        selected: true\n      } : {},\n      accessibilityLabel: options.tabBarAccessibilityLabel,\n      testID: options.tabBarTestID,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: styles.appbar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, React.createElement(Icon, {\n      name: getIcon(label),\n      size: 30,\n      style: {\n        color: isFocused ? '#4ddbff' : '#fff'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/MyTabBar.js"],"names":["React","Icon","styles","StyleSheet","create","container","flex","alignItems","justifyContent","backgroundColor","text","fontFamily","fontSize","appbar","padding","MyTabBar","state","descriptors","navigation","position","bottom","flexDirection","borderRadius","marginRight","marginLeft","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","routes","map","route","index","options","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","defaultPrevented","navigate","onLongPress","getIcon","selected","tabBarAccessibilityLabel","tabBarTestID","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#e9f0ff'\n    },\n    text: {\n      fontFamily: 'Poppins_600SemiBold',\n      fontSize: 30,\n    },\n    appbar:{\n        flex: 1 , \n        alignItems:'center',\n        padding:15, \n    },\n  });\n\nexport default function MyTabBar({ state, descriptors, navigation }) {\n    return (\n      <View style={{ position:'absolute',bottom:0,flexDirection: 'row', borderRadius:20, marginRight:10,marginLeft:10,backgroundColor:'#111111',\n      shadowColor: '#666',\n       shadowOffset: { width: 2, height: 2 },\n       shadowOpacity: 0.5,\n       shadowRadius: 2,\n       elevation: 2, }}>\n        {state.routes.map((route, index) => {\n          const { options } = descriptors[route.key];\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n  \n          const isFocused = state.index === index;\n  \n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n            });\n  \n            if (!isFocused && !event.defaultPrevented) {\n              navigation.navigate(route.name);\n            }\n          };\n  \n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n          \n          const getIcon = (label) =>{\n            if(label=='Account')\n                return \"user\";\n            if(label=='CryptoList')\n                return \"btc\";\n            if(label=='Predictions')\n                return \"line-chart\";\n            if(label=='Statistics')\n                return \"signal\";\n          };\n\n          return (\n          <TouchableOpacity\n              accessibilityRole=\"button\"\n              activeOpacity={1}\n              accessibilityState={isFocused ? { selected: true } : {}}\n              accessibilityLabel={options.tabBarAccessibilityLabel}\n              testID={options.tabBarTestID}\n              onPress={onPress}\n              onLongPress={onLongPress}\n              style={styles.appbar}\n            >\n              <Icon name={getIcon(label)} size={30} style={{color: isFocused ? '#4ddbff' : '#fff'}} />\n            </TouchableOpacity>\n          );\n        })}\n      </View>\n    );\n  }"]},"metadata":{},"sourceType":"module"}
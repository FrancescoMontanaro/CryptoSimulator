{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default function TouchHandler(props) {\n  var data = props.data;\n  var panResponder = React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * data.length);\n        setSwipeIndex(index);\n      }\n    },\n    onPanResponderMove: function onPanResponderMove(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * data.length);\n        setSwipeIndex(index);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease() {\n      setSwipeIndex(-1);\n    }\n  })).current;\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, panResponder.panHandlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }));\n}\n;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js"],"names":["TouchHandler","props","data","panResponder","React","useRef","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","locationX","currentTarget","clientWidth","index","Math","floor","length","setSwipeIndex","onPanResponderMove","onPanResponderRelease","current","flex","panHandlers"],"mappings":";;;AAIA,eAAe,SAASA,YAAT,CAAsBC,KAAtB,EAA4B;AACvC,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AAEA,MAAMC,YAAY,GAAGC,KAAK,CAACC,MAAN,CACjBC,YAAY,CAACC,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE;AAAA,aAAM,IAAN;AAAA,KADZ;AAElBC,IAAAA,mBAAmB,EAAE,6BAACC,GAAD,EAAS;AAC5B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC9F,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYP,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,GAA4BF,GAAG,CAACG,aAAJ,CAAkBC,WAA/C,GAA8DZ,IAAI,CAACgB,MAA9E,CAAZ;AACAC,QAAAA,aAAa,CAACJ,KAAD,CAAb;AACD;AACF,KAPiB;AAQlBK,IAAAA,kBAAkB,EAAE,4BAACV,GAAD,EAAS;AAC3B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC9F,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYP,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,GAA4BF,GAAG,CAACG,aAAJ,CAAkBC,WAA/C,GAA8DZ,IAAI,CAACgB,MAA9E,CAAZ;AACAC,QAAAA,aAAa,CAACJ,KAAD,CAAb;AACD;AACF,KAbiB;AAclBM,IAAAA,qBAAqB,EAAE,iCAAM;AAC3BF,MAAAA,aAAa,CAAC,CAAC,CAAF,CAAb;AACD;AAhBiB,GAApB,CADiB,EAmBnBG,OAnBF;AAsBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AAAb,KAA6BpB,YAAY,CAACqB,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAGH;AAAA","sourcesContent":["import { View } from \"react-native\";\n\n\n\nexport default function TouchHandler(props){\n    const data = props.data;\n\n    const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderGrant: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * data.length);\n              setSwipeIndex(index);\n            }\n          },\n          onPanResponderMove: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * data.length);\n              setSwipeIndex(index);\n            }\n          },\n          onPanResponderRelease: () => {\n            setSwipeIndex(-1);\n          }\n        })\n    ).current;\n\n\n    return(\n        <View style={{ flex: 1}} {...panResponder.panHandlers}/>\n    )\n};"]},"metadata":{},"sourceType":"module"}
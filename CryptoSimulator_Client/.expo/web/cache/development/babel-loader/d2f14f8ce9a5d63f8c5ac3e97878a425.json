{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { LineChart } from 'react-native-svg-charts';\nimport View from \"react-native-web/dist/exports/View\";\nimport { G, Line } from 'react-native-svg';\n\nvar Chart = function (_React$PureComponent) {\n  _inherits(Chart, _React$PureComponent);\n\n  var _super = _createSuper(Chart);\n\n  function Chart() {\n    _classCallCheck(this, Chart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Chart, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var data = [50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80];\n\n      var CustomGrid = function CustomGrid(_ref) {\n        var x = _ref.x,\n            y = _ref.y,\n            data = _ref.data,\n            ticks = _ref.ticks;\n        return React.createElement(G, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }\n        }, ticks.map(function (tick) {\n          return React.createElement(Line, {\n            key: tick,\n            x1: '0%',\n            x2: '100%',\n            y1: y(tick),\n            y2: y(tick),\n            stroke: 'rgba(0,0,0,0.2)',\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 25\n            }\n          });\n        }), data.map(function (_, index) {\n          return React.createElement(Line, {\n            key: index,\n            y1: '0%',\n            y2: '100%',\n            x1: x(index),\n            x2: x(index),\n            stroke: 'rgba(0,0,0,0.1)',\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 25\n            }\n          });\n        }));\n      };\n\n      return React.createElement(View, {\n        style: {\n          height: 200,\n          flexDirection: 'row'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      }, React.createElement(LineChart, {\n        style: {\n          flex: 1\n        },\n        data: data,\n        svg: {\n          stroke: 'rgb(134, 65, 244)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }\n      }, React.createElement(CustomGrid, {\n        belowChart: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return Chart;\n}(React.PureComponent);\n\nexport default Chart;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["React","LineChart","G","Line","Chart","data","CustomGrid","x","y","ticks","map","tick","_","index","height","flexDirection","flex","stroke","PureComponent"],"mappings":";;;;;;;;;;;AAwNA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,SAASC,CAAT,EAAYC,IAAZ,QAAwB,kBAAxB;;IAEMC,K;;;;;;;;;;;;;6BAEO;AAAA;;AAEL,UAAMC,IAAI,GAAG,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,EAAkB,CAAC,CAAnB,EAAsB,CAAC,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,CAAC,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,EAAwD,CAAC,EAAzD,EAA6D,CAAC,EAA9D,CAAb;;AAEA,UAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,YAAGC,CAAH,QAAGA,CAAH;AAAA,YAAMC,CAAN,QAAMA,CAAN;AAAA,YAASH,IAAT,QAASA,IAAT;AAAA,YAAeI,KAAf,QAAeA,KAAf;AAAA,eACf,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGQA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI;AAAA,iBACV,oBAAC,IAAD;AACI,YAAA,GAAG,EAAGA,IADV;AAEI,YAAA,EAAE,EAAG,IAFT;AAGI,YAAA,EAAE,EAAG,MAHT;AAII,YAAA,EAAE,EAAGH,CAAC,CAACG,IAAD,CAJV;AAKI,YAAA,EAAE,EAAGH,CAAC,CAACG,IAAD,CALV;AAMI,YAAA,MAAM,EAAG,iBANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADU;AAAA,SAAd,CAHR,EAiBQN,IAAI,CAACK,GAAL,CAAS,UAACE,CAAD,EAAIC,KAAJ;AAAA,iBACL,oBAAC,IAAD;AACI,YAAA,GAAG,EAAGA,KADV;AAEI,YAAA,EAAE,EAAG,IAFT;AAGI,YAAA,EAAE,EAAG,MAHT;AAII,YAAA,EAAE,EAAGN,CAAC,CAACM,KAAD,CAJV;AAKI,YAAA,EAAE,EAAGN,CAAC,CAACM,KAAD,CALV;AAMI,YAAA,MAAM,EAAG,iBANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADK;AAAA,SAAT,CAjBR,CADe;AAAA,OAAnB;;AAgCA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAG;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,aAAa,EAAE;AAA9B,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAG;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADZ;AAEI,QAAA,IAAI,EAAGX,IAFX;AAGI,QAAA,GAAG,EAAG;AACFY,UAAAA,MAAM,EAAE;AADN,SAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOI,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,CADJ,CADJ;AAaH;;;;EAnDejB,KAAK,CAACkB,a;;AAuD1B,eAAed,KAAf","sourcesContent":["/*\nimport 'react-native-gesture-handler';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport React, {useState,useEffect} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nimport { AreaChart, Grid, XAxis, YAxis} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { Defs, LinearGradient, Stop, Path, G } from 'react-native-svg'\n\nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState({});\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n  const axesSvg = { fontSize: 10, fill: 'grey', fontFamily:  'Poppins_400Regular'};\n\n  const Line = ({ line }) => (\n    <Path\n        key={'line'}\n        d={line}\n        stroke={'rgb(41, 114, 255)'}\n        fill={'none'}\n    />\n  )\n\n  const Gradient = ({ index }) => (\n    <Defs key={index}>\n        <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n            <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n            <Stop offset={'28%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n        </LinearGradient>\n    </Defs>\n  )\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({asset: 'bitcoin', start: '2020-01-01', end: '2020-02-01', interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      let data = [];\n      (cryptoData.values).forEach(sample =>{\n        data.push(sample[4]);\n      })\n\n      const CustomGrid = ({ x, y, data, ticks }) => (\n        <G>\n            {\n                ticks.map(tick => (\n                    <Line\n                        key={ tick }\n                        x1={ '0%' }\n                        x2={ '100%' }\n                        y1={ y(tick) }\n                        y2={ y(tick) }\n                        stroke={ 'rgba(0,0,0,0.2)' }\n                    />\n                ))\n            }\n            {\n                data.map((_, index) => (\n                    <Line\n                        key={ index }\n                        y1={ '0%' }\n                        y2={ '100%' }\n                        x1={ x(index) }\n                        x2={ x(index) }\n                        stroke={ 'rgba(0,0,0,0.2)' }\n                    />\n                ))\n            }\n        </G>\n    )\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.chartContainer}>\n          <Text style={styles.cryptoSymbol}>{cryptoData.symbol}</Text>\n          <Text style={styles.cryptoName}>{cryptoData.name}</Text>\n\n          <View style={{ height: 200, flexDirection: 'row', marginBottom: 15, marginTop: 15 }}>\n              <YAxis\n                  data={data}\n                  contentInset={{ top: 10, bottom: 10 }}\n                  svg={axesSvg}\n                  numberOfTicks={ 6 }\n              />\n              <View style={{ flex: 1, marginLeft: 10 }}>\n                <AreaChart\n                  style={{ height: 200 }}\n                  data={data}\n                  contentInset={{ top: 10, bottom: 10 }}\n                  curve={shape.curveNatural}\n                  svg={{ fill: 'url(#gradient)' }}\n                  >\n                  <CustomGrid/>\n                  <Line/>\n                  <Gradient/>\n                </AreaChart>\n                  <XAxis\n                      style={{ marginHorizontal: -10, marginTop: 5}}\n                      data={data}\n                      formatLabel={(value, index) => index + 1 }\n                      contentInset={{ left: 10, right: 10 }}\n                      svg={axesSvg}\n                      numberOfTicks={ 15 }\n                  />\n              </View>\n          </View>\n\n          <View style={styles.buttonsContainer}>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>\n                Week\n              </Text>\n            </View>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>\n                Month\n              </Text>\n            </View>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>\n                Year\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    );\n    }\n    else{\n      return(\n        <View style={styles.container}>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    backgroundColor: '#e9f0ff',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingTop: 30\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    borderRadius: 20,\n    padding: 20,\n    textAlign: 'left'\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: 20\n  },\n  button: {\n    backgroundColor: '#2970ff',\n    borderRadius: 20,\n    padding: 10,\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  buttonText: {\n    fontFamily: 'Poppins_400Regular',\n    fontSize: 15,\n    color: '#ffffff'\n  }\n});*/\n\nimport React from 'react'\nimport { LineChart } from 'react-native-svg-charts'\nimport { View } from 'react-native'\nimport { G, Line } from 'react-native-svg'\n\nclass Chart extends React.PureComponent {\n\n    render() {\n\n        const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n        const CustomGrid = ({ x, y, data, ticks }) => (\n            <G>\n                {\n                    // Horizontal grid\n                    ticks.map(tick => (\n                        <Line\n                            key={ tick }\n                            x1={ '0%' }\n                            x2={ '100%' }\n                            y1={ y(tick) }\n                            y2={ y(tick) }\n                            stroke={ 'rgba(0,0,0,0.2)'\n                          }\n                        />\n                    ))\n                }\n                {\n                    // Vertical grid\n                    data.map((_, index) => (\n                        <Line\n                            key={ index }\n                            y1={ '0%' }\n                            y2={ '100%' }\n                            x1={ x(index) }\n                            x2={ x(index) }\n                            stroke={ 'rgba(0,0,0,0.1)' }\n                        />\n                    ))\n                }\n            </G>\n        )\n\n        return (\n            <View style={ { height: 200, flexDirection: 'row' } }>\n                <LineChart\n                    style={ { flex: 1 } }\n                    data={ data }\n                    svg={ {\n                        stroke: 'rgb(134, 65, 244)',\n                    } }\n                >\n                    <CustomGrid belowChart={true}/>\n                </LineChart>\n            </View>\n        )\n    }\n\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\",\n    _this2 = this;\n\nimport 'react-native-gesture-handler';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\nimport { AreaChart } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\nimport { Defs, LinearGradient, Stop, Path } from 'react-native-svg';\nimport Tooltip from \"./Tooltip\";\nimport PriceViewer from \"./PriceViewer\";\nimport Icon from \"@expo/vector-icons/FontAwesome5\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\n\nvar exampleData = _toConsumableArray(Array(20)).map(function (d, index) {\n  return {\n    key: \"item-\" + index,\n    label: index,\n    backgroundColor: \"rgb(\" + Math.floor(Math.random() * 255) + \", \" + index * 5 + \", \" + 132 + \")\"\n  };\n});\n\nexport default function Predictions() {\n  var _this = this;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cryptoData = _useState4[0],\n      setCryptoData = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scrollable = _useState6[0],\n      setScrollable = _useState6[1];\n\n  var flatListRef = React.useRef();\n\n  var _useFonts = useFonts({\n    Poppins_300Light: Poppins_300Light,\n    Poppins_400Regular: Poppins_400Regular,\n    Poppins_500Medium: Poppins_500Medium,\n    Poppins_600SemiBold: Poppins_600SemiBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var setScroll = function setScroll(scroll) {\n    setScrollable(scroll);\n  };\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index,\n        drag = _ref.drag,\n        isActive = _ref.isActive;\n    return React.createElement(View, {\n      style: [styles.chartContainer, {\n        shadowRadius: isActive ? 20 : 5\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      onLongPress: drag,\n      style: {\n        position: 'absolute',\n        top: 20,\n        right: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }\n    }, React.createElement(Icon, {\n      name: \"grip-lines\",\n      size: 20,\n      color: \"#c0c0c7\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }\n    })), React.createElement(Chart, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var endDate = new Date();\n  endDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1) + \"-\" + endDate.getDate();\n  var startDate = new Date(new Date().getTime() - 3 * 365 * 24 * 60 * 60 * 1000);\n  startDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getDate();\n  useEffect(function () {\n    if (loading && !fontsLoaded) {\n      firebase.functions().httpsCallable('getCryptoData')({\n        assets: ['BTC', 'ETH', 'LTC', 'ADA', 'DOT', 'XLM'],\n        start: startDate,\n        end: endDate,\n        interval: '1d'\n      }).then(function (response) {\n        if (response.data.statusCode == 200) {\n          setCryptoData(response.data.body);\n          setLoading(false);\n        } else {\n          console.error(response.data.body);\n        }\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  }, []);\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 12\n      }\n    });\n  } else {\n    if (!loading) {\n      return React.createElement(SafeAreaView, {\n        style: {\n          flex: 1,\n          backgroundColor: '#e9f0ff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.topBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: [styles.text, {\n          fontSize: 18\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }\n      }, \"CryptoSimulator\")), React.createElement(DraggableFlatList, {\n        data: cryptoData,\n        contentContainerStyle: styles.container,\n        ref: flatListRef,\n        renderItem: renderItem,\n        showsVerticalScrollIndicator: false,\n        scrollEnabled: scrollable,\n        keyExtractor: function keyExtractor(item, index) {\n          return \"draggable-item-\" + item.key;\n        },\n        onDragEnd: function onDragEnd(_ref2) {\n          var data = _ref2.data;\n          return setCryptoData(data);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.topBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: [styles.text, {\n          fontSize: 18\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }\n      }, \"CryptoSimulator\")), React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }\n      }, \"LOADING...\"));\n    }\n  }\n}\n\nvar Chart = function Chart(props) {\n  var allData = props.data;\n\n  var _useState7 = useState(allData.filter(function (sample) {\n    return sample[0] >= new Date().getTime() - 30 * 24 * 60 * 60 * 1000;\n  })),\n      _useState8 = _slicedToArray(_useState7, 2),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var _useState9 = useState([0, 1, 0, 0, 0]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      period = _useState10[0],\n      setPeriod = _useState10[1];\n\n  var _useState11 = useState(-1),\n      _useState12 = _slicedToArray(_useState11, 2),\n      touchX = _useState12[0],\n      setTouchX = _useState12[1];\n\n  var width = Math.ceil(0.92 * Dimensions.get('window').width - 40);\n\n  var ChartLine = function ChartLine(_ref3) {\n    var line = _ref3.line;\n    return React.createElement(Path, {\n      key: 'line',\n      d: line,\n      stroke: 'rgb(41, 114, 255)',\n      fill: 'none',\n      strokeWidth: 2,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 5\n      }\n    });\n  };\n\n  var Gradient = function Gradient(_ref4) {\n    var index = _ref4.index;\n    return React.createElement(Defs, {\n      key: index,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 5\n      }\n    }, React.createElement(LinearGradient, {\n      id: 'gradient',\n      x1: '0%',\n      y1: '0%',\n      x2: '0%',\n      y2: '100%',\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }\n    }, React.createElement(Stop, {\n      offset: '0%',\n      stopColor: 'rgb(41, 114, 255)',\n      stopOpacity: 0.2,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }\n    }), React.createElement(Stop, {\n      offset: '50%',\n      stopColor: 'rgb(41, 114, 255)',\n      stopOpacity: 0,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  var panResponder = React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant(evt) {\n      props.scroll(false);\n\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width) {\n        setTouchX(evt.nativeEvent.locationX);\n      }\n    },\n    onPanResponderMove: function onPanResponderMove(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width) {\n        setTouchX(evt.nativeEvent.locationX);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease() {\n      props.scroll(true);\n      setTouchX(-1);\n    },\n    onPanResponderTerminate: function onPanResponderTerminate() {\n      props.scroll(true);\n      setTouchX(-1);\n    }\n  })).current;\n\n  function buttonCLicked(index) {\n    var newPeriod = [0, 0, 0, 0, 0];\n    newPeriod[index] = 1;\n    setPeriod(newPeriod);\n    var currentDate = new Date().getTime();\n    var newData;\n\n    if (index == 0) {\n      var end = currentDate - 7 * 24 * 60 * 60 * 1000;\n      newData = allData.filter(function (sample) {\n        return sample[0] >= end;\n      });\n    } else if (index == 1) {\n      var end = currentDate - 30 * 24 * 60 * 60 * 1000;\n      newData = allData.filter(function (sample) {\n        return sample[0] >= end;\n      });\n    } else if (index == 2) {\n      var end = currentDate - 90 * 24 * 60 * 60 * 1000;\n      newData = allData.filter(function (sample) {\n        return sample[0] >= end;\n      });\n    } else if (index == 3) {\n      var end = currentDate - 365 * 24 * 60 * 60 * 1000;\n      newData = allData.filter(function (sample) {\n        return sample[0] >= end;\n      });\n    } else if (index == 4) {\n      newData = allData;\n    }\n\n    setData(newData);\n  }\n\n  return React.createElement(View, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      textAlign: 'left'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.cryptoSymbol,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 11\n    }\n  }, props.symbol), React.createElement(View, _extends({\n    style: {\n      width: 20\n    }\n  }, Drag.panHandlers, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 11\n    }\n  }), React.createElement(Icon, {\n    name: \"grip-lines\",\n    size: 20,\n    color: \"#c0c0c7\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }\n  }))), React.createElement(Text, {\n    style: styles.cryptoName,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 9\n    }\n  }, props.name)), React.createElement(View, {\n    style: {\n      flex: 1,\n      height: 20,\n      textAlign: 'center',\n      marginBottom: 20\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }\n  }, React.createElement(PriceViewer, {\n    touchX: touchX,\n    deviceWidth: width,\n    data: data,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: {\n      height: 80,\n      flexDirection: 'row',\n      marginBottom: 15,\n      marginTop: 15\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }\n  }, React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, panResponder.panHandlers, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 9\n    }\n  }), React.createElement(AreaChart, {\n    style: {\n      flex: 1,\n      height: 80\n    },\n    data: data.map(function (x) {\n      return x[1];\n    }),\n    contentInset: {\n      top: 10,\n      bottom: 10\n    },\n    curve: shape.curveNatural,\n    svg: {\n      fill: 'url(#gradient)'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 11\n    }\n  }, React.createElement(Tooltip, {\n    touchX: touchX,\n    deviceWidth: width,\n    data: data,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 13\n    }\n  }), React.createElement(ChartLine, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }\n  }), React.createElement(Gradient, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 13\n    }\n  })))), React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.buttonsContainer,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: period[0] == 1 ? [styles.button, {\n      backgroundColor: 'rgb(41, 114, 255)'\n    }] : styles.button,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return buttonCLicked(0);\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: period[0] == 1 ? [styles.buttonText, {\n      color: '#ffffff'\n    }] : styles.buttonText,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 13\n    }\n  }, \"1W\")), React.createElement(View, {\n    style: period[1] == 1 ? [styles.button, {\n      backgroundColor: 'rgb(41, 114, 255)'\n    }] : styles.button,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return buttonCLicked(1);\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: period[1] == 1 ? [styles.buttonText, {\n      color: '#ffffff'\n    }] : styles.buttonText,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 13\n    }\n  }, \"1M\")), React.createElement(View, {\n    style: period[2] == 1 ? [styles.button, {\n      backgroundColor: 'rgb(41, 114, 255)'\n    }] : styles.button,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return buttonCLicked(2);\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: period[2] == 1 ? [styles.buttonText, {\n      color: '#ffffff'\n    }] : styles.buttonText,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 13\n    }\n  }, \"3M\")), React.createElement(View, {\n    style: period[3] == 1 ? [styles.button, {\n      backgroundColor: 'rgb(41, 114, 255)'\n    }] : styles.button,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return buttonCLicked(3);\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: period[3] == 1 ? [styles.buttonText, {\n      color: '#ffffff'\n    }] : styles.buttonText,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 13\n    }\n  }, \"1Y\")), React.createElement(View, {\n    style: period[4] == 1 ? [styles.button, {\n      backgroundColor: 'rgb(41, 114, 255)'\n    }] : styles.button,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return buttonCLicked(4);\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: period[4] == 1 ? [styles.buttonText, {\n      color: '#ffffff'\n    }] : styles.buttonText,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 13\n    }\n  }, \"3Y\")))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexGrow: 0,\n    marginTop: 70,\n    paddingBottom: 100\n  },\n  topBar: {\n    position: 'absolute',\n    zIndex: 200,\n    top: 0,\n    height: 60,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1,\n    backgroundColor: \"#fff\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 5,\n    paddingBottom: 8\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '92%',\n    borderRadius: 20,\n    padding: 20,\n    height: 300,\n    marginBottom: 20,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/Università/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["React","useState","useEffect","useRef","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","AppLoading","firebase","AreaChart","shape","Defs","LinearGradient","Stop","Path","Tooltip","PriceViewer","Icon","DraggableFlatList","exampleData","Array","map","d","index","key","label","backgroundColor","Math","floor","random","Predictions","loading","setLoading","cryptoData","setCryptoData","scrollable","setScrollable","flatListRef","fontsLoaded","setScroll","scroll","renderItem","item","drag","isActive","styles","chartContainer","shadowRadius","position","top","right","endDate","Date","getFullYear","getMonth","getDate","startDate","getTime","functions","httpsCallable","assets","start","end","interval","then","response","data","statusCode","body","console","error","catch","flex","topBar","text","fontSize","container","alignItems","justifyContent","Chart","props","allData","filter","sample","setData","period","setPeriod","touchX","setTouchX","width","ceil","Dimensions","get","ChartLine","line","Gradient","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","locationX","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","current","buttonCLicked","newPeriod","currentDate","newData","textAlign","flexDirection","cryptoSymbol","symbol","Drag","panHandlers","cryptoName","name","height","marginBottom","marginTop","x","bottom","curveNatural","fill","buttonsContainer","button","buttonText","color","StyleSheet","flexGrow","paddingBottom","zIndex","shadowColor","shadowOffset","shadowOpacity","borderRadius","padding","fontFamily"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport { Animated, StyleSheet, Text, TouchableOpacity, ScrollView, FlatList, View, PanResponder, Dimensions, SafeAreaView} from 'react-native';\nimport React, {useState,useEffect,useRef} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nimport { AreaChart} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { Defs, LinearGradient, Stop, Path} from 'react-native-svg'\nimport Tooltip from './Tooltip'\nimport PriceViewer from './PriceViewer'\nimport Icon from 'react-native-vector-icons/FontAwesome5'\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\n\n/* \nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState([]);\n  const [scrollable, setScrollable] = useState(true);\n  const flatListRef = React.useRef()\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n  const setScroll = (scroll) => {\n    setScrollable(scroll);\n  }\n\n  const moveItem = (old_index, new_index) => {\n    var arr = cryptoData.slice();\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    setCryptoData(arr);\n  };\n\n  const scrollTo = (offset) => {\n    flatListRef.current.scrollToOffset({ animated: true, offset: offset })\n  }\n\n  const renderItem = ({ item, index }) => {\n    return (\n      <Chart name={item.name} symbol={item.symbol} index={index} scrollTo={scrollTo} dataLength={cryptoData.length} scroll={setScroll} moveItem={moveItem} data={(item.values).map(x => [x[0], x[4]])}/>\n    );\n  };\n\n  var endDate = new Date();\n  endDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1) + \"-\" + endDate.getDate();\n\n  var startDate = new Date((new Date()).getTime() - 3*365*24*60*60*1000);\n  startDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getDate();\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({assets: ['BTC', 'ETH', 'LTC', 'ADA', 'DOT', 'XLM'], start: startDate, end: endDate, interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n    return (\n      <SafeAreaView style={{flex: 1, backgroundColor:'#e9f0ff'}}>\n        <View style={styles.topBar}>\n          <Text style={[styles.text, {fontSize: 18}]}>CryptoSimulator</Text>\n        </View>\n        <FlatList data={cryptoData} renderItem={renderItem} ref={flatListRef} contentContainerStyle={styles.container} showsVerticalScrollIndicator={false} scrollEnabled={scrollable}/>\n      </SafeAreaView>\n    );\n    }\n    else{\n      return(\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n          <View style={styles.topBar}>\n            <Text style={[styles.text, {fontSize: 18}]}>CryptoSimulator</Text>\n          </View>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};\n\n/*\nconst Chart = (props) => {\n  const allData = props.data;\n  const [data, setData] = useState(allData.filter(sample => sample[0] >= ((new Date).getTime() - 30*24*60*60*1000)));\n  const [period, setPeriod] = useState([0,1,0,0,0]);\n  const [touchX, setTouchX] = useState(-1);\n  const width = Math.ceil(0.92 * Dimensions.get('window').width - 40);\n  const pan = useRef(new Animated.ValueXY()).current;\n  const [dragging, setDragging] = useState({elevation: 1, shadowRadius: 5, zIndex: 1});\n  \n  const ChartLine = ({ line }) => (\n    <Path\n        key={'line'}\n        d={line}\n        stroke={'rgb(41, 114, 255)'}\n        fill={'none'}\n        strokeWidth={2}\n    />\n  )\n\n  const Gradient = ({ index }) => (\n    <Defs key={index}>\n        <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n            <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n            <Stop offset={'50%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n        </LinearGradient>\n    </Defs>\n  )\n\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: (evt) => {\n        props.scroll(false);\n        if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width){\n          setTouchX(evt.nativeEvent.locationX);\n        }\n      },\n      onPanResponderMove: (evt) => {\n        if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width){\n          setTouchX(evt.nativeEvent.locationX);\n        }\n      },\n      onPanResponderRelease: () => {\n        props.scroll(true);\n        setTouchX(-1);\n      },\n      onPanResponderTerminate: () => {\n        props.scroll(true);\n        setTouchX(-1);\n      }\n    })\n  ).current;\n\n\n  function stopDragging(){\n    let offset;\n    if(pan.y._value / 301 < 0){\n      offset = Math.floor(Math.abs(pan.y._value / 301)) * -1;\n    }\n    else{\n      offset = Math.floor(pan.y._value / 301);\n    }\n    let newIndex;\n    if(props.index == 0 && offset < 0){\n      newIndex = props.index;\n    }\n    else if(props.index == props.dataLength - 1 && offset > 0){\n      newIndex = props.index;\n    }\n    else{\n      newIndex = props.index + offset;\n      if(newIndex < 0){\n        newIndex = 0;\n      }\n      else if(newIndex > props.dataLength - 1){\n        newIndex = props.dataLength - 1;\n      }\n    }\n    if(newIndex != props.index){\n      props.moveItem(props.index , newIndex);\n    }\n    else{\n      Animated.spring(\n        pan,\n        { toValue: { x: 0, y: 0 }, useNativeDriver: false }\n      ).start();\n    }\n    props.scroll(true);\n    setDragging({elevation: 100, shadowRadius: 5, zIndex: 100});\n    setTimeout(function(){\n      setDragging({elevation: 1, shadowRadius: 5, zIndex: 1});\n    },300);\n  }\n\n\n  const Drag = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: () => {\n        props.scroll(false);\n        setDragging({elevation: 100, shadowRadius: 20, zIndex: 100});\n        pan.setOffset({\n          x: 0,\n          y: 0\n        });\n      },\n      onPanResponderMove: Animated.event(\n        [\n          null,\n          { dx: pan.x, dy: pan.y }\n        ],\n        {useNativeDriver: false},\n      ),\n      onPanResponderRelease: () => {\n        //props.scrollTo(0);\n        stopDragging();\n      },\n      onPanResponderTerminate: () => {\n        //props.scrollTo(0);\n        stopDragging();\n      }\n    })\n  ).current;\n\n  function buttonCLicked(index){\n    var newPeriod = [0,0,0,0,0];\n    newPeriod[index] = 1;\n    setPeriod(newPeriod);\n    var currentDate = (new Date()).getTime();\n    var newData;\n\n    if(index == 0){\n      var end = (currentDate - 7*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 1){\n      var end = (currentDate - 30*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 2){\n      var end = (currentDate - 90*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 3){\n      var end = (currentDate - 365*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 4){\n      newData = allData;\n    }\n    setData(newData);\n  }\n\n\n  return (\n    <Animated.View style={{elevation: dragging.elevation, zIndex: dragging.zIndex, width:'100%', alignItems: 'center', transform: [{ translateX: 0 }, { translateY: pan.y }]}}>\n      <View style={[{shadowRadius: dragging.shadowRadius}, styles.chartContainer]}>\n        <View style={{flex: 1, textAlign: 'left'}}>\n          <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between'}}>\n            <Text style={styles.cryptoSymbol}>{props.symbol}</Text>\n            <View style={{width: 20}} {...Drag.panHandlers}>\n              <Icon name=\"grip-lines\" size={20} color=\"#c0c0c7\" />\n            </View>\n          </View>\n          <Text style={styles.cryptoName}>{props.name}</Text>\n        </View>\n\n        <View style={{flex: 1, height: 20, textAlign: 'center', marginBottom: 20}}>\n          <PriceViewer touchX={touchX} deviceWidth={width} data={data}></PriceViewer>\n        </View>\n\n        <View style={{ height: 80, flexDirection: 'row', marginBottom: 15, marginTop: 15 }}>\n          <View style={{ flex: 1}} {...panResponder.panHandlers}>\n            <AreaChart\n              style={{ flex:1, height: 80}}\n              data={data.map(x => x[1])}\n              contentInset={{ top: 10, bottom: 10 }}\n              curve={shape.curveNatural}\n              svg={{ fill: 'url(#gradient)' }}\n              >\n              <Tooltip touchX={touchX} deviceWidth={width} data={data}/>\n              <ChartLine/>\n              <Gradient/>\n            </AreaChart>\n          </View>\n        </View>\n\n        <View style={{flex: 1, alignItems: 'center'}}>\n          <View style={styles.buttonsContainer}>\n            <View style={period[0] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(0)}>\n              <Text style={period[0] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                1W\n              </Text>\n            </View>\n            <View style={period[1] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(1)}>\n              <Text style={period[1] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                1M\n              </Text>\n            </View>\n            <View style={period[2] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(2)}>\n              <Text style={period[2] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                3M\n              </Text>\n            </View>\n            <View style={period[3] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(3)}>\n              <Text style={period[3] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                1Y\n              </Text>\n            </View>\n            <View style={period[4] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(4)}>\n              <Text style={period[4] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                3Y\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n};\n*/\n\nconst exampleData = [...Array(20)].map((d, index) => ({\n  key: `item-${index}`, // For example only -- don't use index as your key!\n  label: index,\n  backgroundColor: `rgb(${Math.floor(Math.random() * 255)}, ${index *\n    5}, ${132})`\n}));\n\nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState([]);\n  const [scrollable, setScrollable] = useState(true);\n  const flatListRef = React.useRef();\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n\n  const setScroll = (scroll) => {\n    setScrollable(scroll);\n  }\n\n  const renderItem = ({ item, index, drag, isActive }) =>{\n    return (\n      <View style={[styles.chartContainer, {shadowRadius: isActive ? 20 : 5}]}>\n        <TouchableOpacity onLongPress={drag} style={{position: 'absolute', top: 20, right: 20}}>\n          <Icon name=\"grip-lines\" size={20} color=\"#c0c0c7\"/>\n        </TouchableOpacity>\n        <Chart></Chart>\n      </View>\n    );\n  };\n\n  var endDate = new Date();\n  endDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1) + \"-\" + endDate.getDate();\n\n  var startDate = new Date((new Date()).getTime() - 3*365*24*60*60*1000);\n  startDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getDate();\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({assets: ['BTC', 'ETH', 'LTC', 'ADA', 'DOT', 'XLM'], start: startDate, end: endDate, interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      return (\n        <SafeAreaView style={{flex: 1, backgroundColor:'#e9f0ff'}}>\n          <View style={styles.topBar}>\n            <Text style={[styles.text, {fontSize: 18}]}>CryptoSimulator</Text>\n          </View>\n          <DraggableFlatList data={cryptoData} contentContainerStyle={styles.container} ref={flatListRef} renderItem={renderItem} showsVerticalScrollIndicator={false} scrollEnabled={scrollable} keyExtractor={(item, index) => `draggable-item-${item.key}`} onDragEnd={({ data }) => setCryptoData(data)}/>\n        </SafeAreaView>\n      );\n    }\n    else{\n      return(\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n          <View style={styles.topBar}>\n            <Text style={[styles.text, {fontSize: 18}]}>CryptoSimulator</Text>\n          </View>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n}\n\n\nconst Chart = (props) => {\n  const allData = props.data;\n  const [data, setData] = useState(allData.filter(sample => sample[0] >= ((new Date).getTime() - 30*24*60*60*1000)));\n  const [period, setPeriod] = useState([0,1,0,0,0]);\n  const [touchX, setTouchX] = useState(-1);\n  const width = Math.ceil(0.92 * Dimensions.get('window').width - 40);\n  \n  const ChartLine = ({ line }) => (\n    <Path\n        key={'line'}\n        d={line}\n        stroke={'rgb(41, 114, 255)'}\n        fill={'none'}\n        strokeWidth={2}\n    />\n  )\n\n  const Gradient = ({ index }) => (\n    <Defs key={index}>\n        <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n            <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n            <Stop offset={'50%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n        </LinearGradient>\n    </Defs>\n  )\n\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: (evt) => {\n        props.scroll(false);\n        if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width){\n          setTouchX(evt.nativeEvent.locationX);\n        }\n      },\n      onPanResponderMove: (evt) => {\n        if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width){\n          setTouchX(evt.nativeEvent.locationX);\n        }\n      },\n      onPanResponderRelease: () => {\n        props.scroll(true);\n        setTouchX(-1);\n      },\n      onPanResponderTerminate: () => {\n        props.scroll(true);\n        setTouchX(-1);\n      }\n    })\n  ).current;\n\n\n  function buttonCLicked(index){\n    var newPeriod = [0,0,0,0,0];\n    newPeriod[index] = 1;\n    setPeriod(newPeriod);\n    var currentDate = (new Date()).getTime();\n    var newData;\n\n    if(index == 0){\n      var end = (currentDate - 7*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 1){\n      var end = (currentDate - 30*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 2){\n      var end = (currentDate - 90*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 3){\n      var end = (currentDate - 365*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 4){\n      newData = allData;\n    }\n    setData(newData);\n  }\n\n\n  return (\n    <View>\n      <View style={{flex: 1, textAlign: 'left'}}>\n        <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between'}}>\n          <Text style={styles.cryptoSymbol}>{props.symbol}</Text>\n          <View style={{width: 20}} {...Drag.panHandlers}>\n            <Icon name=\"grip-lines\" size={20} color=\"#c0c0c7\" />\n          </View>\n        </View>\n        <Text style={styles.cryptoName}>{props.name}</Text>\n      </View>\n\n      <View style={{flex: 1, height: 20, textAlign: 'center', marginBottom: 20}}>\n        <PriceViewer touchX={touchX} deviceWidth={width} data={data}></PriceViewer>\n      </View>\n\n      <View style={{ height: 80, flexDirection: 'row', marginBottom: 15, marginTop: 15 }}>\n        <View style={{ flex: 1}} {...panResponder.panHandlers}>\n          <AreaChart\n            style={{ flex:1, height: 80}}\n            data={data.map(x => x[1])}\n            contentInset={{ top: 10, bottom: 10 }}\n            curve={shape.curveNatural}\n            svg={{ fill: 'url(#gradient)' }}\n            >\n            <Tooltip touchX={touchX} deviceWidth={width} data={data}/>\n            <ChartLine/>\n            <Gradient/>\n          </AreaChart>\n        </View>\n      </View>\n\n      <View style={{flex: 1, alignItems: 'center'}}>\n        <View style={styles.buttonsContainer}>\n          <View style={period[0] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(0)}>\n            <Text style={period[0] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n              1W\n            </Text>\n          </View>\n          <View style={period[1] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(1)}>\n            <Text style={period[1] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n              1M\n            </Text>\n          </View>\n          <View style={period[2] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(2)}>\n            <Text style={period[2] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n              3M\n            </Text>\n          </View>\n          <View style={period[3] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(3)}>\n            <Text style={period[3] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n              1Y\n            </Text>\n          </View>\n          <View style={period[4] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(4)}>\n            <Text style={period[4] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n              3Y\n            </Text>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\n\n/*const styles = StyleSheet.create({\n  container: {\n    flexGrow: 0,\n    justifyContent: 'flex-start',\n    marginTop: 70,\n    paddingBottom: 100,\n  },\n  topBar: {\n    position: 'absolute',\n    zIndex: 200,\n    top: 0,\n    height: 60,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1,\n    backgroundColor: \"#fff\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 5,\n    paddingBottom: 8\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '92%',\n    borderRadius: 20,\n    padding: 20,\n    marginBottom: 20,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  currentPrice: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 18,\n    color: '#000000',\n    margin: 0\n  },\n  currentDate: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000',\n    margin: 0\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    width: '80%', \n    flexDirection: 'row', \n    justifyContent: 'space-between'\n  },\n  button: {\n    paddingTop: 5,\n    paddingBottom: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 30\n  },\n  buttonText: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000'\n  },\n  addChart: {\n    width: '92%',\n    height: 300,\n    borderRadius: 20,\n    borderColor: '#000',\n    backgroundColor: 'red'\n  }\n});*/\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 0,\n    marginTop: 70,\n    paddingBottom: 100,\n  },\n  topBar: {\n    position: 'absolute',\n    zIndex: 200,\n    top: 0,\n    height: 60,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1,\n    backgroundColor: \"#fff\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 5,\n    paddingBottom: 8\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '92%',\n    borderRadius: 20,\n    padding: 20,\n    height: 300,\n    marginBottom: 20,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n});"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/MyTabBar.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport Icon from \"@expo/vector-icons/Feather\";\nexport default function MyTabBar(_ref) {\n  var _this = this;\n\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation,\n      colorScheme = _ref.colorScheme;\n  return React.createElement(View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      flexDirection: 'row',\n      backgroundColor: colorScheme === 'dark' ? '#fff' : '#212244',\n      shadowColor: '#666',\n      shadowOffset: {\n        width: 2,\n        height: 2\n      },\n      shadowOpacity: 0.5,\n      shadowRadius: 2,\n      elevation: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        navigation.navigate(route.name);\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    var getIcon = function getIcon(label) {\n      if (label == 'Charts') return \"home\";\n      if (label == 'Predictions') return \"trending-up\";\n      if (label == 'Account') return \"user\";\n    };\n\n    return React.createElement(TouchableOpacity, {\n      accessibilityRole: \"button\",\n      activeOpacity: 1,\n      accessibilityState: isFocused ? {\n        selected: true\n      } : {},\n      accessibilityLabel: options.tabBarAccessibilityLabel,\n      testID: options.tabBarTestID,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: styles.appbar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, React.createElement(Icon, {\n      name: getIcon(label),\n      size: 28,\n      style: {\n        color: isFocused ? '#2970ff' : colorScheme === 'dark' ? '#000' : '#fff'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#e9f0ff'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30\n  },\n  appbar: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 10\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/MyTabBar.js"],"names":["React","Icon","MyTabBar","state","descriptors","navigation","colorScheme","position","bottom","flexDirection","backgroundColor","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","routes","map","route","index","options","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","defaultPrevented","navigate","onLongPress","getIcon","selected","tabBarAccessibilityLabel","tabBarTestID","styles","appbar","color","StyleSheet","create","container","flex","alignItems","justifyContent","text","fontFamily","fontSize","padding"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, TouchableOpacity, StyleSheet, Appearance} from 'react-native';\nimport Icon from 'react-native-vector-icons/Feather';\n\n\nexport default function MyTabBar({ state, descriptors, navigation, colorScheme }) {\n  return (\n    <View style={{position:'absolute',bottom:0,flexDirection: 'row', backgroundColor: colorScheme === 'dark' ? '#fff' : '#212244',\n    shadowColor: '#666',\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 2,\n    elevation: 2, }}>\n    {state.routes.map((route, index) => {\n      const { options } = descriptors[route.key];\n      const label =\n        options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : route.name;\n\n      const isFocused = state.index === index;\n\n      const onPress = () => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n        });\n\n          if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n          }\n        };\n\n        const onLongPress = () => {\n          navigation.emit({\n            type: 'tabLongPress',\n            target: route.key,\n          });\n        };\n        \n        const getIcon = (label) =>{\n          if(label=='Charts')\n            return \"home\";\n          if(label=='Predictions')\n              return \"trending-up\";\n          if(label=='Account')\n            return \"user\";\n        };\n\n        return (\n        <TouchableOpacity\n            accessibilityRole=\"button\"\n            activeOpacity={1}\n            accessibilityState={isFocused ? { selected: true } : {}}\n            accessibilityLabel={options.tabBarAccessibilityLabel}\n            testID={options.tabBarTestID}\n            onPress={onPress}\n            onLongPress={onLongPress}\n            style={styles.appbar}\n          >\n            <Icon name={getIcon(label)} size={28} style={{color: isFocused ? '#2970ff' : colorScheme === 'dark' ? '#000' : '#fff'}} />\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#e9f0ff'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n  },\n  appbar:{\n      flex: 1 , \n      alignItems:'center',\n      padding:10, \n  },\n});"]},"metadata":{},"sourceType":"module"}
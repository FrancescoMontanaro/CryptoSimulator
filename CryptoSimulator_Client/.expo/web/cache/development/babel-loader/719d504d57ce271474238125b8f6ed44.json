{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport React from 'react';\nimport 'react-native-gesture-handler';\nexport default function TouchHandler(props) {\n  var panResponder = React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        console.log(\"PORCO\");\n        props.setIndex(evt.nativeEvent.locationX, evt.currentTarget.clientWidth);\n      }\n    },\n    onPanResponderMove: function onPanResponderMove(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        props.setIndex(evt.nativeEvent.locationX, evt.currentTarget.clientWidth);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease() {\n      props.setIndex(-1, null);\n    }\n  }));\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, panResponder.panHandlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), props.chart);\n}\n;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js"],"names":["React","TouchHandler","props","panResponder","useRef","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","locationX","currentTarget","clientWidth","console","log","setIndex","onPanResponderMove","onPanResponderRelease","flex","panHandlers","chart"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,8BAAP;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AAEvC,MAAMC,YAAY,GAAGH,KAAK,CAACI,MAAN,CACjBC,YAAY,CAACC,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE;AAAA,aAAM,IAAN;AAAA,KADZ;AAElBC,IAAAA,mBAAmB,EAAE,6BAACC,GAAD,EAAS;AAC5B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC5FC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEFb,QAAAA,KAAK,CAACc,QAAN,CAAeP,GAAG,CAACC,WAAJ,CAAgBC,SAA/B,EAA0CF,GAAG,CAACG,aAAJ,CAAkBC,WAA5D;AACD;AACF,KARiB;AASlBI,IAAAA,kBAAkB,EAAE,4BAACR,GAAD,EAAS;AAC3B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAE9FX,QAAAA,KAAK,CAACc,QAAN,CAAeP,GAAG,CAACC,WAAJ,CAAgBC,SAA/B,EAA0CF,GAAG,CAACG,aAAJ,CAAkBC,WAA5D;AACD;AACF,KAdiB;AAelBK,IAAAA,qBAAqB,EAAE,iCAAM;AAC3BhB,MAAAA,KAAK,CAACc,QAAN,CAAe,CAAC,CAAhB,EAAmB,IAAnB;AACD;AAjBiB,GAApB,CADiB,CAArB;AAuBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAE;AAAR;AAAb,KAA6BhB,YAAY,CAACiB,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKlB,KAAK,CAACmB,KADX,CADJ;AAKH;AAAA","sourcesContent":["import { View, PanResponder } from 'react-native';\nimport React from 'react';\nimport 'react-native-gesture-handler';\n\nexport default function TouchHandler(props){\n\n    const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderGrant: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n                console.log(\"PORCO\");\n              //var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * dataLength);\n              props.setIndex(evt.nativeEvent.locationX, evt.currentTarget.clientWidth);\n            }\n          },\n          onPanResponderMove: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              //var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * dataLength);\n              props.setIndex(evt.nativeEvent.locationX, evt.currentTarget.clientWidth);\n            }\n          },\n          onPanResponderRelease: () => {\n            props.setIndex(-1, null);\n          }\n        })\n    );\n\n\n    return(\n        <View style={{ flex: 1}} {...panResponder.panHandlers} >\n            {props.chart}\n        </View>\n    )\n};"]},"metadata":{},"sourceType":"module"}
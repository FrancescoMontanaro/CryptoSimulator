{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport React from 'react';\nimport 'react-native-gesture-handler';\nexport default function TouchHandler(props) {\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, panResponder.panHandlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), props.chart);\n}\n;\n\nfunction panResponder(dataLength) {\n  return React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * dataLength);\n        props.setIndex(index);\n      }\n    },\n    onPanResponderMove: function onPanResponderMove(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * dataLength);\n        console.log(dataLength);\n        props.setIndex(index);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease() {\n      props.setIndex(-1);\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js"],"names":["React","TouchHandler","props","flex","panResponder","panHandlers","chart","dataLength","useRef","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","locationX","currentTarget","clientWidth","index","Math","floor","setIndex","onPanResponderMove","console","log","onPanResponderRelease"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,8BAAP;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AA2BvC,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AAAb,KAA6BC,YAAY,CAACC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKH,KAAK,CAACI,KADX,CADJ;AAKH;AAAA;;AAGD,SAASF,YAAT,CAAsBG,UAAtB,EAAiC;AAC7B,SAAOP,KAAK,CAACQ,MAAN,CACHC,YAAY,CAACC,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE;AAAA,aAAM,IAAN;AAAA,KADZ;AAElBC,IAAAA,mBAAmB,EAAE,6BAACC,GAAD,EAAS;AAC5B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC9F,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYP,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,GAA4BF,GAAG,CAACG,aAAJ,CAAkBC,WAA/C,GAA8DV,UAAzE,CAAZ;AACAL,QAAAA,KAAK,CAACmB,QAAN,CAAeH,KAAf;AACD;AACF,KAPiB;AAQlBI,IAAAA,kBAAkB,EAAE,4BAACT,GAAD,EAAS;AAC3B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC9F,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYP,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,GAA4BF,GAAG,CAACG,aAAJ,CAAkBC,WAA/C,GAA8DV,UAAzE,CAAZ;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAYjB,UAAZ;AACAL,QAAAA,KAAK,CAACmB,QAAN,CAAeH,KAAf;AACD;AACF,KAdiB;AAelBO,IAAAA,qBAAqB,EAAE,iCAAM;AAC3BvB,MAAAA,KAAK,CAACmB,QAAN,CAAe,CAAC,CAAhB;AACD;AAjBiB,GAApB,CADG,CAAP;AAqBH","sourcesContent":["import { View, PanResponder } from 'react-native';\nimport React from 'react';\nimport 'react-native-gesture-handler';\n\nexport default function TouchHandler(props){\n\n/*     const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderGrant: (evt) => {\n            const dataLength = props.dataLength;\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * dataLength);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderMove: (evt) => {\n            const dataLength = props.dataLength;\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * dataLength);\n              console.log(dataLength);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderRelease: () => {\n            props.setIndex(-1);\n          }\n        })\n    ); */\n\n\n    return(\n        <View style={{ flex: 1}} {...panResponder.panHandlers} >\n            {props.chart}\n        </View>\n    )\n};\n\n\nfunction panResponder(dataLength){\n    return React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderGrant: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * dataLength);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderMove: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * dataLength);\n              console.log(dataLength);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderRelease: () => {\n            props.setIndex(-1);\n          }\n        })\n    );\n}"]},"metadata":{},"sourceType":"module"}
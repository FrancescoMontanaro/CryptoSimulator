{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState, useEffect } from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\nimport { AreaChart, Grid } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\n\nvar AreaChartExample = function (_React$PureComponent) {\n  _inherits(AreaChartExample, _React$PureComponent);\n\n  var _super = _createSuper(AreaChartExample);\n\n  function AreaChartExample() {\n    _classCallCheck(this, AreaChartExample);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AreaChartExample, [{\n    key: \"render\",\n    value: function render() {\n      var data = [50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80];\n      return React.createElement(AreaChart, {\n        style: {\n          height: 200\n        },\n        data: data,\n        contentInset: {\n          top: 30,\n          bottom: 30\n        },\n        curve: shape.curveNatural,\n        svg: {\n          fill: 'rgba(41, 114, 255, 0.6)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }, React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }\n      }));\n    }\n  }]);\n\n  return AreaChartExample;\n}(React.PureComponent);\n\nexport { AreaChartExample as default };","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["StatusBar","React","useState","useEffect","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","AppLoading","firebase","AreaChart","Grid","shape","AreaChartExample","data","height","top","bottom","curveNatural","fill","PureComponent"],"mappings":";;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAO,8BAAP;;;;;AAEA,OAAOC,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,kBAArC,EAAyDC,iBAAzD,EAA4EC,mBAA5E,QAAsG,4BAAtG;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,oBAAP;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,yBAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;;IAsBqBC,gB;;;;;;;;;;;;;6BACV;AACL,UAAMC,IAAI,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,CAAC,CAAlB,EAAqB,CAAC,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C,CAAC,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,CAAC,EAAxD,EAA4D,CAAC,EAA7D,CAAb;AAEA,aACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SADX;AAEI,QAAA,IAAI,EAAED,IAFV;AAGI,QAAA,YAAY,EAAE;AAAEE,UAAAA,GAAG,EAAE,EAAP;AAAWC,UAAAA,MAAM,EAAE;AAAnB,SAHlB;AAII,QAAA,KAAK,EAAEL,KAAK,CAACM,YAJjB;AAKI,QAAA,GAAG,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAUH;;;;EAd2CnB,KAAK,CAACoB,a;;SAA/BP,gB","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport React, {useState,useEffect} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nimport { AreaChart, Grid } from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\n\n/*export default class Predictions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contatore: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Hai cliccato {this.state.contatore} volte</p>\n        <button onClick={() => this.setState({ contatore: this.state.contatore + 1 })}>\n          Cliccami\n        </button>\n      </div>\n    );\n  }\n}*/\n\nexport default class AreaChartExample extends React.PureComponent {\n  render() {\n      const data = [50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80]\n\n      return (\n          <AreaChart\n              style={{ height: 200 }}\n              data={data}\n              contentInset={{ top: 30, bottom: 30 }}\n              curve={shape.curveNatural}\n              svg={{ fill: 'rgba(41, 114, 255, 0.6)' }}>\n              <Grid />\n          </AreaChart>\n      )\n  }\n}\n\n/*export default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState({});\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({asset: 'bitcoin', start: '2020-01-01', end: '2020-02-01', interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      console.log(\"CRYPTODATA: \", cryptoData);\n      return (\n        <View style={styles.container}>\n          <View style={styles.chartContainer}>\n            <Text style={styles.cryptoSymbol}>{cryptoData.symbol}</Text>\n            <Text style={styles.cryptoName}>{cryptoData.name}</Text>\n            <View style={styles.buttonsContainer}>\n              <View style={styles.button}>\n                <Text style={styles.buttonText}>\n                  Week\n                </Text>\n              </View>\n              <View style={styles.button}>\n                <Text style={styles.buttonText}>\n                  Month\n                </Text>\n              </View>\n              <View style={styles.button}>\n                <Text style={styles.buttonText}>\n                  Year\n                </Text>\n              </View>\n            </View>\n          </View>\n        </View>\n      );\n    }\n    else{\n      return(\n        <View style={styles.container}>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    backgroundColor: '#e9f0ff',\n    alignItems: 'center',\n    justifyContent: 'from-start',\n    paddingTop: 30\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    borderRadius: 20,\n    padding: 20,\n    textAlign: 'left'\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: 20\n  },\n  button: {\n    backgroundColor: '#2970ff',\n    borderRadius: 20,\n    padding: 10,\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  buttonText: {\n    fontFamily: 'Poppins_400Regular',\n    fontSize: 15,\n    color: '#ffffff'\n  }\n});\n*/"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport React from 'react';\nimport 'react-native-gesture-handler';\nexport default function TouchHandler(props) {\n  var data = props.data;\n  var panResponder = React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * data.length);\n        props.setIndex(index);\n      }\n    },\n    onPanResponderMove: function onPanResponderMove(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * data.length);\n        props.setIndex(index);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease() {\n      props.setIndex(-1);\n    }\n  })).current;\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, panResponder.panHandlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), React.createElement(AreaChart, {\n    style: {\n      flex: 1,\n      height: 120\n    },\n    data: data.map(function (x) {\n      return x[1];\n    }),\n    contentInset: {\n      top: 10,\n      bottom: 10\n    },\n    curve: shape.curveNatural,\n    svg: {\n      fill: 'url(#gradient)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  }, React.createElement(Tooltip, {\n    swipeIndex: swipeIndex,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), React.createElement(ChartLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), React.createElement(Gradient, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })));\n}\n;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js"],"names":["React","TouchHandler","props","data","panResponder","useRef","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","locationX","currentTarget","clientWidth","index","Math","floor","length","setIndex","onPanResponderMove","onPanResponderRelease","current","flex","panHandlers","height","map","x","top","bottom","shape","curveNatural","fill","swipeIndex"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,8BAAP;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACvC,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AAEA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,MAAN,CACjBC,YAAY,CAACC,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE;AAAA,aAAM,IAAN;AAAA,KADZ;AAElBC,IAAAA,mBAAmB,EAAE,6BAACC,GAAD,EAAS;AAC5B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC9F,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYP,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,GAA4BF,GAAG,CAACG,aAAJ,CAAkBC,WAA/C,GAA8DX,IAAI,CAACe,MAA9E,CAAZ;AACAhB,QAAAA,KAAK,CAACiB,QAAN,CAAeJ,KAAf;AACD;AACF,KAPiB;AAQlBK,IAAAA,kBAAkB,EAAE,4BAACV,GAAD,EAAS;AAC3B,UAAGA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6B,CAA7B,IAAkCF,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,IAA6BF,GAAG,CAACG,aAAJ,CAAkBC,WAApF,EAAgG;AAC9F,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYP,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,GAA4BF,GAAG,CAACG,aAAJ,CAAkBC,WAA/C,GAA8DX,IAAI,CAACe,MAA9E,CAAZ;AACAhB,QAAAA,KAAK,CAACiB,QAAN,CAAeJ,KAAf;AACD;AACF,KAbiB;AAclBM,IAAAA,qBAAqB,EAAE,iCAAM;AAC3BnB,MAAAA,KAAK,CAACiB,QAAN,CAAe,CAAC,CAAhB;AACD;AAhBiB,GAApB,CADiB,EAmBnBG,OAnBF;AAsBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AAAb,KAA6BnB,YAAY,CAACoB,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACc,oBAAC,SAAD;AACV,IAAA,KAAK,EAAE;AAAED,MAAAA,IAAI,EAAC,CAAP;AAAUE,MAAAA,MAAM,EAAE;AAAlB,KADG;AAEV,IAAA,IAAI,EAAEtB,IAAI,CAACuB,GAAL,CAAS,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,KAAV,CAFI;AAGV,IAAA,YAAY,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAHJ;AAIV,IAAA,KAAK,EAAEC,KAAK,CAACC,YAJH;AAKV,IAAA,GAAG,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOV,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAEC,UAArB;AAAiC,IAAA,IAAI,EAAE9B,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPU,EAQV,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARU,EASV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATU,CADd,CADJ;AAeH;AAAA","sourcesContent":["import { View, PanResponder } from 'react-native';\nimport React from 'react';\nimport 'react-native-gesture-handler';\n\nexport default function TouchHandler(props){\n    const data = props.data;\n\n    const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderGrant: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * data.length);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderMove: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * data.length);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderRelease: () => {\n            props.setIndex(-1);\n          }\n        })\n    ).current;\n\n\n    return(\n        <View style={{ flex: 1}} {...panResponder.panHandlers}>\n                      <AreaChart\n            style={{ flex:1, height: 120}}\n            data={data.map(x => x[1])}\n            contentInset={{ top: 10, bottom: 10 }}\n            curve={shape.curveNatural}\n            svg={{ fill: 'url(#gradient)' }}\n            >\n            <Tooltip swipeIndex={swipeIndex} data={data}/>\n            <ChartLine/>\n            <Gradient/>\n          </AreaChart>\n        </View>\n    )\n};"]},"metadata":{},"sourceType":"module"}
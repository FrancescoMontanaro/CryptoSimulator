{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState, useEffect } from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\nexport default function Predictions() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cryptoList = _useState4[0],\n      setCryptoList = _useState4[1];\n\n  var _useFonts = useFonts({\n    Poppins_300Light: Poppins_300Light,\n    Poppins_400Regular: Poppins_400Regular,\n    Poppins_600SemiBold: Poppins_600SemiBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  useEffect(function () {\n    if (loading) {\n      firebase.functions().httpsCallable('getCryptoData')({\n        asset: 'bitcoin',\n        start: '2020-01-01',\n        end: '2020-02-01',\n        interval: '1d'\n      }).then(function (response) {\n        console.log(response);\n        setLoading(false);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  });\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    });\n  } else {\n    if (!loading) {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.chartContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f3ffff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    height: '30%',\n    borderRadius: 10,\n    padding: 10,\n    textAlign: 'left',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3.84,\n    elevation: 1\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#ffffff'\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["StatusBar","React","useState","useEffect","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_600SemiBold","AppLoading","firebase","Predictions","loading","setLoading","cryptoList","setCryptoList","fontsLoaded","functions","httpsCallable","asset","start","end","interval","then","response","console","log","catch","error","styles","container","chartContainer","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","borderRadius","padding","textAlign","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","text","fontFamily","fontSize","color"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport { StyleSheet, Text, View } from 'react-native';\nimport React, {useState,useEffect} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\n\n\nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoList, setCryptoList] = useState([]);\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_600SemiBold\n  });\n\n\n  useEffect(()=>{\n    if(loading){\n    firebase.functions().httpsCallable('getCryptoData')({asset: 'bitcoin', start: '2020-01-01', end: '2020-02-01', interval: '1d'}).then(\n        (response)=> {\n            console.log(response);\n            setLoading(false);\n        }\n    ).catch(\n        (error)=> {\n            console.log(error);\n        }\n    )\n  }})\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      return (\n        <View style={styles.container}>\n          <View style={styles.chartContainer}>\n\n          </View>\n        </View>\n      );\n    }\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    backgroundColor: '#f3ffff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    height: '30%',\n    borderRadius: 10,\n    padding: 10,\n    textAlign: 'left',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3.84,\n    elevation: 1,\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#ffffff'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/CryptoList.js\";\nimport 'react-native-gesture-handler';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport Crypto from \"./Crypto\";\nimport getCryptoList from \"../APIs/Firebase\";\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\nvar cryptos = [{\n  name: 'btc',\n  value: 10\n}, {\n  name: 'btc',\n  value: 10\n}, {\n  name: 'btc',\n  value: 10\n}, {\n  name: 'btc',\n  value: 10\n}, {\n  name: 'btc',\n  value: 10\n}, {\n  name: 'btc',\n  value: 10\n}, {\n  name: 'btc',\n  value: 10\n}];\nexport default function CryptoList() {\n  var _this = this;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cryptoList = _useState4[0],\n      setCryptoList = _useState4[1];\n\n  var _useFonts = useFonts({\n    Poppins_300Light: Poppins_300Light,\n    Poppins_400Regular: Poppins_400Regular,\n    Poppins_600SemiBold: Poppins_600SemiBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  useEffect(function () {\n    if (loading) {\n      firebase.functions().httpsCallable('getCryptoList')().then(function (response) {\n        console.log(response.data[\"cryptoList\"]);\n        setCryptoList(JSON.parse(response.data[\"cryptoList\"]));\n        setLoading(false);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  });\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 16\n      }\n    });\n  } else {\n    if (!loading) {\n      console.log(\"LISTA:\", cryptoList);\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.cryptoContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, React.createElement(FlatList, {\n        data: [].concat(_toConsumableArray(cryptoList), [\"add\"]),\n        showsVerticalScrollIndicator: false,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(Crypto, {\n            name: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 125\n            }\n          });\n        },\n        keyExtractor: function keyExtractor(x, i) {\n          return i.toString();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      })));\n    } else {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: '#ffffff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, \"LOADING...\"));\n    }\n  }\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000000',\n    paddingLeft: 20,\n    paddingRight: 20,\n    paddingTop: 30\n  },\n  cryptoContainer: {\n    height: '90%'\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/CryptoList.js"],"names":["React","useState","useEffect","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_600SemiBold","AppLoading","Crypto","getCryptoList","firebase","cryptos","name","value","CryptoList","loading","setLoading","cryptoList","setCryptoList","fontsLoaded","functions","httpsCallable","then","response","console","log","data","JSON","parse","catch","error","styles","container","cryptoContainer","item","x","i","toString","color","StyleSheet","create","flex","backgroundColor","paddingLeft","paddingRight","paddingTop","height"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport React, {useState,useEffect} from 'react';\nimport { StyleSheet,FlatList,ScrollView, View,Text } from 'react-native';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport Crypto from './Crypto';\nimport getCryptoList from '../APIs/Firebase';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nconst cryptos=[\n    {\n        name:'btc',\n        value:10\n    },\n    {\n        name:'btc',\n        value:10\n    },\n    {\n        name:'btc',\n        value:10\n    },\n    {\n        name:'btc',\n        value:10\n    },\n    {\n        name:'btc',\n        value:10\n    },\n    {\n        name:'btc',\n        value:10\n    },\n    {\n        name:'btc',\n        value:10\n    }\n];\n\n\nexport default function CryptoList() {\n    const [loading, setLoading] = useState(true);\n    const [cryptoList, setCryptoList] = useState([]);\n    let [fontsLoaded] = useFonts({\n            Poppins_300Light,\n            Poppins_400Regular,\n            Poppins_600SemiBold\n        });\n\n    useEffect(()=>{\n        if(loading){\n        firebase.functions().httpsCallable('getCryptoList')().then(\n            (response)=> {\n                console.log(response.data[\"cryptoList\"]);\n                setCryptoList(JSON.parse(response.data[\"cryptoList\"]));\n                setLoading(false);\n            }\n        ).catch(\n            (error)=> {\n                console.log(error);\n            }\n        )\n    }\n    }\n    );\n    \n    if (!fontsLoaded) {\n        return <AppLoading/>;\n    }\n    else{\n        if(!loading){\n        console.log(\"LISTA:\",cryptoList);\n        return (\n            <View style={styles.container}>\n                <View style={styles.cryptoContainer}>\n                    <FlatList data={[...cryptoList,\"add\"]} showsVerticalScrollIndicator ={false} renderItem={({ item }) => (<Crypto name={item}/>) } keyExtractor={(x, i) => i.toString()}/> \n                </View>\n            </View>\n        );\n        }\n        else{\n            return(\n                <View style={styles.container}>\n                    <Text style={{color:'#ffffff'}}>\n                        LOADING...\n                    </Text>\n            </View>\n            );\n        }\n    }\n};\n\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#000000',\n        paddingLeft: 20,\n        paddingRight: 20,\n        paddingTop: 30\n    },\n    cryptoContainer: {\n        height: '90%'\n    }\n});\n"]},"metadata":{},"sourceType":"module"}
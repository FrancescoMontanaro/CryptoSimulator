{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\";\nimport 'react-native-gesture-handler';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\nimport { AreaChart } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\nimport { Defs, LinearGradient, Stop, Path } from 'react-native-svg';\nimport Tooltip from \"./Tooltip\";\nimport PriceViewer from \"./PriceViewer\";\nimport Icon from \"@expo/vector-icons/FontAwesome5\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\n\nvar exampleData = _toConsumableArray(Array(20)).map(function (d, index) {\n  return {\n    key: \"item-\" + index,\n    label: index,\n    backgroundColor: \"rgb(\" + Math.floor(Math.random() * 255) + \", \" + index * 5 + \", \" + 132 + \")\"\n  };\n});\n\nexport default function Predictions() {\n  var _this = this;\n\n  var _useState = useState(exampleData),\n      _useState2 = _slicedToArray(_useState, 2),\n      cryptoData = _useState2[0],\n      setCryptoData = _useState2[1];\n\n  var flatListRef = React.useRef();\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index,\n        drag = _ref.drag,\n        isActive = _ref.isActive;\n    return React.createElement(TouchableOpacity, {\n      style: {\n        height: 100,\n        backgroundColor: isActive ? \"blue\" : item.backgroundColor,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      onLongPress: drag,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: \"bold\",\n        color: \"white\",\n        fontSize: 32\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 7\n      }\n    }, item.label));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: '#e9f0ff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }\n  }, React.createElement(DraggableFlatList, {\n    data: cryptoData,\n    ref: flatListRef,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item, index) {\n      return \"draggable-item-\" + item.key;\n    },\n    onDragEnd: function onDragEnd(_ref2) {\n      var data = _ref2.data;\n      return setCryptoData(data);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexGrow: 0,\n    justifyContent: 'flex-start',\n    marginTop: 70,\n    paddingBottom: 100\n  },\n  topBar: {\n    position: 'absolute',\n    zIndex: 200,\n    top: 0,\n    height: 60,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1,\n    backgroundColor: \"#fff\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 5,\n    paddingBottom: 8\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '92%',\n    borderRadius: 20,\n    padding: 20,\n    marginBottom: 20,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  currentPrice: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 18,\n    color: '#000000',\n    margin: 0\n  },\n  currentDate: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000',\n    margin: 0\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    width: '80%',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  button: {\n    paddingTop: 5,\n    paddingBottom: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 30\n  },\n  buttonText: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000'\n  },\n  addChart: {\n    width: '92%',\n    height: 300,\n    borderRadius: 20,\n    borderColor: '#000',\n    backgroundColor: 'red'\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["React","useState","useEffect","useRef","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","AppLoading","firebase","AreaChart","shape","Defs","LinearGradient","Stop","Path","Tooltip","PriceViewer","Icon","DraggableFlatList","exampleData","Array","map","d","index","key","label","backgroundColor","Math","floor","random","Predictions","cryptoData","setCryptoData","flatListRef","renderItem","item","drag","isActive","height","alignItems","justifyContent","fontWeight","color","fontSize","flex","data","styles","StyleSheet","create","container","flexGrow","marginTop","paddingBottom","topBar","position","zIndex","top","width","shadowColor","shadowOffset","shadowOpacity","shadowRadius","chartContainer","borderRadius","padding","marginBottom","cryptoSymbol","fontFamily","cryptoName","currentPrice","margin","currentDate","text","buttonsContainer","flexDirection","button","paddingTop","paddingLeft","paddingRight","buttonText","addChart","borderColor"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport { Animated, StyleSheet, Text, TouchableOpacity, ScrollView, FlatList, View, PanResponder, Dimensions, SafeAreaView} from 'react-native';\nimport React, {useState,useEffect,useRef} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nimport { AreaChart} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { Defs, LinearGradient, Stop, Path} from 'react-native-svg'\nimport Tooltip from './Tooltip'\nimport PriceViewer from './PriceViewer'\nimport Icon from 'react-native-vector-icons/FontAwesome5'\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\n\n/* \nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState([]);\n  const [scrollable, setScrollable] = useState(true);\n  const flatListRef = React.useRef()\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n  const setScroll = (scroll) => {\n    setScrollable(scroll);\n  }\n\n  const moveItem = (old_index, new_index) => {\n    var arr = cryptoData.slice();\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    setCryptoData(arr);\n  };\n\n  const scrollTo = (offset) => {\n    flatListRef.current.scrollToOffset({ animated: true, offset: offset })\n  }\n\n  const renderItem = ({ item, index }) => {\n    return (\n      <Chart name={item.name} symbol={item.symbol} index={index} scrollTo={scrollTo} dataLength={cryptoData.length} scroll={setScroll} moveItem={moveItem} data={(item.values).map(x => [x[0], x[4]])}/>\n    );\n  };\n\n  var endDate = new Date();\n  endDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1) + \"-\" + endDate.getDate();\n\n  var startDate = new Date((new Date()).getTime() - 3*365*24*60*60*1000);\n  startDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getDate();\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({assets: ['BTC', 'ETH', 'LTC', 'ADA', 'DOT', 'XLM'], start: startDate, end: endDate, interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n    return (\n      <SafeAreaView style={{flex: 1, backgroundColor:'#e9f0ff'}}>\n        <View style={styles.topBar}>\n          <Text style={[styles.text, {fontSize: 18}]}>CryptoSimulator</Text>\n        </View>\n        <FlatList data={cryptoData} renderItem={renderItem} ref={flatListRef} contentContainerStyle={styles.container} showsVerticalScrollIndicator={false} scrollEnabled={scrollable}/>\n      </SafeAreaView>\n    );\n    }\n    else{\n      return(\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n          <View style={styles.topBar}>\n            <Text style={[styles.text, {fontSize: 18}]}>CryptoSimulator</Text>\n          </View>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};\n\n/*\nconst Chart = (props) => {\n  const allData = props.data;\n  const [data, setData] = useState(allData.filter(sample => sample[0] >= ((new Date).getTime() - 30*24*60*60*1000)));\n  const [period, setPeriod] = useState([0,1,0,0,0]);\n  const [touchX, setTouchX] = useState(-1);\n  const width = Math.ceil(0.92 * Dimensions.get('window').width - 40);\n  const pan = useRef(new Animated.ValueXY()).current;\n  const [dragging, setDragging] = useState({elevation: 1, shadowRadius: 5, zIndex: 1});\n  \n  const ChartLine = ({ line }) => (\n    <Path\n        key={'line'}\n        d={line}\n        stroke={'rgb(41, 114, 255)'}\n        fill={'none'}\n        strokeWidth={2}\n    />\n  )\n\n  const Gradient = ({ index }) => (\n    <Defs key={index}>\n        <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n            <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n            <Stop offset={'50%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n        </LinearGradient>\n    </Defs>\n  )\n\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: (evt) => {\n        props.scroll(false);\n        if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width){\n          setTouchX(evt.nativeEvent.locationX);\n        }\n      },\n      onPanResponderMove: (evt) => {\n        if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= width){\n          setTouchX(evt.nativeEvent.locationX);\n        }\n      },\n      onPanResponderRelease: () => {\n        props.scroll(true);\n        setTouchX(-1);\n      },\n      onPanResponderTerminate: () => {\n        props.scroll(true);\n        setTouchX(-1);\n      }\n    })\n  ).current;\n\n\n  function stopDragging(){\n    let offset;\n    if(pan.y._value / 301 < 0){\n      offset = Math.floor(Math.abs(pan.y._value / 301)) * -1;\n    }\n    else{\n      offset = Math.floor(pan.y._value / 301);\n    }\n    let newIndex;\n    if(props.index == 0 && offset < 0){\n      newIndex = props.index;\n    }\n    else if(props.index == props.dataLength - 1 && offset > 0){\n      newIndex = props.index;\n    }\n    else{\n      newIndex = props.index + offset;\n      if(newIndex < 0){\n        newIndex = 0;\n      }\n      else if(newIndex > props.dataLength - 1){\n        newIndex = props.dataLength - 1;\n      }\n    }\n    if(newIndex != props.index){\n      props.moveItem(props.index , newIndex);\n    }\n    else{\n      Animated.spring(\n        pan,\n        { toValue: { x: 0, y: 0 }, useNativeDriver: false }\n      ).start();\n    }\n    props.scroll(true);\n    setDragging({elevation: 100, shadowRadius: 5, zIndex: 100});\n    setTimeout(function(){\n      setDragging({elevation: 1, shadowRadius: 5, zIndex: 1});\n    },300);\n  }\n\n\n  const Drag = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: () => {\n        props.scroll(false);\n        setDragging({elevation: 100, shadowRadius: 20, zIndex: 100});\n        pan.setOffset({\n          x: 0,\n          y: 0\n        });\n      },\n      onPanResponderMove: Animated.event(\n        [\n          null,\n          { dx: pan.x, dy: pan.y }\n        ],\n        {useNativeDriver: false},\n      ),\n      onPanResponderRelease: () => {\n        //props.scrollTo(0);\n        stopDragging();\n      },\n      onPanResponderTerminate: () => {\n        //props.scrollTo(0);\n        stopDragging();\n      }\n    })\n  ).current;\n\n  function buttonCLicked(index){\n    var newPeriod = [0,0,0,0,0];\n    newPeriod[index] = 1;\n    setPeriod(newPeriod);\n    var currentDate = (new Date()).getTime();\n    var newData;\n\n    if(index == 0){\n      var end = (currentDate - 7*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 1){\n      var end = (currentDate - 30*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 2){\n      var end = (currentDate - 90*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 3){\n      var end = (currentDate - 365*24*60*60*1000);\n      newData = allData.filter(sample => sample[0] >= end);\n    }\n    else if(index == 4){\n      newData = allData;\n    }\n    setData(newData);\n  }\n\n\n  return (\n    <Animated.View style={{elevation: dragging.elevation, zIndex: dragging.zIndex, width:'100%', alignItems: 'center', transform: [{ translateX: 0 }, { translateY: pan.y }]}}>\n      <View style={[{shadowRadius: dragging.shadowRadius}, styles.chartContainer]}>\n        <View style={{flex: 1, textAlign: 'left'}}>\n          <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between'}}>\n            <Text style={styles.cryptoSymbol}>{props.symbol}</Text>\n            <View style={{width: 20}} {...Drag.panHandlers}>\n              <Icon name=\"grip-lines\" size={20} color=\"#c0c0c7\" />\n            </View>\n          </View>\n          <Text style={styles.cryptoName}>{props.name}</Text>\n        </View>\n\n        <View style={{flex: 1, height: 20, textAlign: 'center', marginBottom: 20}}>\n          <PriceViewer touchX={touchX} deviceWidth={width} data={data}></PriceViewer>\n        </View>\n\n        <View style={{ height: 80, flexDirection: 'row', marginBottom: 15, marginTop: 15 }}>\n          <View style={{ flex: 1}} {...panResponder.panHandlers}>\n            <AreaChart\n              style={{ flex:1, height: 80}}\n              data={data.map(x => x[1])}\n              contentInset={{ top: 10, bottom: 10 }}\n              curve={shape.curveNatural}\n              svg={{ fill: 'url(#gradient)' }}\n              >\n              <Tooltip touchX={touchX} deviceWidth={width} data={data}/>\n              <ChartLine/>\n              <Gradient/>\n            </AreaChart>\n          </View>\n        </View>\n\n        <View style={{flex: 1, alignItems: 'center'}}>\n          <View style={styles.buttonsContainer}>\n            <View style={period[0] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(0)}>\n              <Text style={period[0] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                1W\n              </Text>\n            </View>\n            <View style={period[1] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(1)}>\n              <Text style={period[1] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                1M\n              </Text>\n            </View>\n            <View style={period[2] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(2)}>\n              <Text style={period[2] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                3M\n              </Text>\n            </View>\n            <View style={period[3] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(3)}>\n              <Text style={period[3] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                1Y\n              </Text>\n            </View>\n            <View style={period[4] == 1 ? [styles.button, {backgroundColor: 'rgb(41, 114, 255)'}]:styles.button} onStartShouldSetResponder={() => buttonCLicked(4)}>\n              <Text style={period[4] == 1 ? [styles.buttonText, {color: '#ffffff'}]:styles.buttonText}>\n                3Y\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n};\n*/\n\nconst exampleData = [...Array(20)].map((d, index) => ({\n  key: `item-${index}`, // For example only -- don't use index as your key!\n  label: index,\n  backgroundColor: `rgb(${Math.floor(Math.random() * 255)}, ${index *\n    5}, ${132})`\n}));\n\nexport default function Predictions() {\n  const [cryptoData, setCryptoData] = useState(exampleData);\n\n  const flatListRef = React.useRef()\n\n  const renderItem = ({ item, index, drag, isActive }) =>{\n    return (\n      <TouchableOpacity\n      style={{\n        height: 100,\n        backgroundColor: isActive ? \"blue\" : item.backgroundColor,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n      onLongPress={drag}\n      >\n      <Text\n        style={{\n          fontWeight: \"bold\",\n          color: \"white\",\n          fontSize: 32\n        }}\n      >\n        {item.label}\n      </Text>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n      <SafeAreaView style={{flex: 1, backgroundColor:'#e9f0ff'}}>\n        <DraggableFlatList data={cryptoData} ref={flatListRef} renderItem={renderItem} keyExtractor={(item, index) => `draggable-item-${item.key}`} onDragEnd={({ data }) => setCryptoData(data)}/>\n      </SafeAreaView>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 0,\n    justifyContent: 'flex-start',\n    marginTop: 70,\n    paddingBottom: 100,\n  },\n  topBar: {\n    position: 'absolute',\n    zIndex: 200,\n    top: 0,\n    height: 60,\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    width: '100%',\n    flex: 1,\n    backgroundColor: \"#fff\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 5,\n    paddingBottom: 8\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '92%',\n    borderRadius: 20,\n    padding: 20,\n    marginBottom: 20,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  currentPrice: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 18,\n    color: '#000000',\n    margin: 0\n  },\n  currentDate: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000',\n    margin: 0\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    width: '80%', \n    flexDirection: 'row', \n    justifyContent: 'space-between'\n  },\n  button: {\n    paddingTop: 5,\n    paddingBottom: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 30\n  },\n  buttonText: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000'\n  },\n  addChart: {\n    width: '92%',\n    height: 300,\n    borderRadius: 20,\n    borderColor: '#000',\n    backgroundColor: 'red'\n  }\n});"]},"metadata":{},"sourceType":"module"}
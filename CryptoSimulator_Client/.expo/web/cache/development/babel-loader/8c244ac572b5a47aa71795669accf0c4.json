{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport React from 'react';\nimport 'react-native-gesture-handler';\nimport { AreaChart } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\nimport { Defs, LinearGradient, Stop, Path } from 'react-native-svg';\nimport Tooltip from \"./Tooltip\";\nexport default function TouchHandler(props) {\n  var _this = this;\n\n  var data = props.data;\n  var swipeIndex = props.swipeIndex;\n\n  var ChartLine = function ChartLine(_ref) {\n    var line = _ref.line;\n    return React.createElement(Path, {\n      key: 'line',\n      d: line,\n      stroke: 'rgb(41, 114, 255)',\n      fill: 'none',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    });\n  };\n\n  var Gradient = function Gradient(_ref2) {\n    var index = _ref2.index;\n    return React.createElement(Defs, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, React.createElement(LinearGradient, {\n      id: 'gradient',\n      x1: '0%',\n      y1: '0%',\n      x2: '0%',\n      y2: '100%',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, React.createElement(Stop, {\n      offset: '0%',\n      stopColor: 'rgb(41, 114, 255)',\n      stopOpacity: 0.2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }), React.createElement(Stop, {\n      offset: '28%',\n      stopColor: 'rgb(41, 114, 255)',\n      stopOpacity: 0,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    })));\n  };\n\n  var panResponder = React.useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * data.length);\n        console.log(data.length);\n        props.setIndex(index);\n      }\n    },\n    onPanResponderMove: function onPanResponderMove(evt) {\n      if (evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth) {\n        var index = Math.floor(evt.nativeEvent.locationX / evt.currentTarget.clientWidth * data.length);\n        props.setIndex(index);\n      }\n    },\n    onPanResponderRelease: function onPanResponderRelease() {\n      props.setIndex(-1);\n    }\n  })).current;\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, panResponder.panHandlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), React.createElement(AreaChart, {\n    style: {\n      flex: 1,\n      height: 120\n    },\n    data: data.map(function (x) {\n      return x[1];\n    }),\n    contentInset: {\n      top: 10,\n      bottom: 10\n    },\n    curve: shape.curveNatural,\n    svg: {\n      fill: 'url(#gradient)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, React.createElement(Tooltip, {\n    swipeIndex: swipeIndex,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }), React.createElement(ChartLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), React.createElement(Gradient, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  })));\n}\n;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/TouchHandler.js"],"names":["React","AreaChart","shape","Defs","LinearGradient","Stop","Path","Tooltip","TouchHandler","props","data","swipeIndex","ChartLine","line","Gradient","index","panResponder","useRef","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","locationX","currentTarget","clientWidth","Math","floor","length","console","log","setIndex","onPanResponderMove","onPanResponderRelease","current","flex","panHandlers","height","map","x","top","bottom","curveNatural","fill"],"mappings":"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","sourcesContent":["import { View, PanResponder } from 'react-native';\nimport React from 'react';\nimport 'react-native-gesture-handler';\nimport { AreaChart} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { Defs, LinearGradient, Stop, Path} from 'react-native-svg'\nimport Tooltip from './Tooltip'\n\n\nexport default function TouchHandler(props){\n    const data = props.data;\n    const swipeIndex = props.swipeIndex;\n\n    const ChartLine = ({ line }) => (\n        <Path\n            key={'line'}\n            d={line}\n            stroke={'rgb(41, 114, 255)'}\n            fill={'none'}\n        />\n    )\n    \n      const Gradient = ({ index }) => (\n        <Defs key={index}>\n            <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n                <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n                <Stop offset={'28%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n            </LinearGradient>\n        </Defs>\n    )\n\n\n    const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onPanResponderGrant: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * data.length);\n              console.log(data.length)\n              props.setIndex(index);\n            }\n          },\n          onPanResponderMove: (evt) => {\n            if(evt.nativeEvent.locationX >= 0 && evt.nativeEvent.locationX <= evt.currentTarget.clientWidth){\n              var index = Math.floor((evt.nativeEvent.locationX / evt.currentTarget.clientWidth) * data.length);\n              props.setIndex(index);\n            }\n          },\n          onPanResponderRelease: () => {\n            props.setIndex(-1);\n          }\n        })\n    ).current;\n\n\n    return(\n        <View style={{ flex: 1}} {...panResponder.panHandlers}>\n            <AreaChart\n                style={{ flex:1, height: 120}}\n                data={data.map(x => x[1])}\n                contentInset={{ top: 10, bottom: 10 }}\n                curve={shape.curveNatural}\n                svg={{ fill: 'url(#gradient)' }}\n                >\n                <Tooltip swipeIndex={swipeIndex} data={data}/>\n                <ChartLine/>\n                <Gradient/>\n          </AreaChart>\n        </View>\n    )\n};"]},"metadata":{},"sourceType":"module"}
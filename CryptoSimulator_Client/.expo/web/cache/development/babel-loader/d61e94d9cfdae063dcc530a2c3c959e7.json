{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/*\nimport 'react-native-gesture-handler';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport React, {useState,useEffect} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nimport { AreaChart, Grid, XAxis, YAxis} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { Defs, LinearGradient, Stop, Path, G } from 'react-native-svg'\n\nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState({});\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n  const axesSvg = { fontSize: 10, fill: 'grey', fontFamily:  'Poppins_400Regular'};\n\n  const Line = ({ line }) => (\n    <Path\n        key={'line'}\n        d={line}\n        stroke={'rgb(41, 114, 255)'}\n        fill={'none'}\n    />\n  )\n\n  const Gradient = ({ index }) => (\n    <Defs key={index}>\n        <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n            <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n            <Stop offset={'28%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n        </LinearGradient>\n    </Defs>\n  )\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({asset: 'bitcoin', start: '2020-01-01', end: '2020-02-01', interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      let data = [];\n      (cryptoData.values).forEach(sample =>{\n        data.push(sample[4]);\n      })\n\n      const CustomGrid = ({ x, y, data, ticks }) => (\n        <G>\n            {\n                ticks.map(tick => (\n                    <Line\n                        key={ tick }\n                        x1={ '0%' }\n                        x2={ '100%' }\n                        y1={ y(tick) }\n                        y2={ y(tick) }\n                        stroke={ 'rgba(0,0,0,0.2)' }\n                    />\n                ))\n            }\n            {\n                data.map((_, index) => (\n                    <Line\n                        key={ index }\n                        y1={ '0%' }\n                        y2={ '100%' }\n                        x1={ x(index) }\n                        x2={ x(index) }\n                        stroke={ 'rgba(0,0,0,0.2)' }\n                    />\n                ))\n            }\n        </G>\n    )\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.chartContainer}>\n          <Text style={styles.cryptoSymbol}>{cryptoData.symbol}</Text>\n          <Text style={styles.cryptoName}>{cryptoData.name}</Text>\n\n          <View style={{ height: 200, flexDirection: 'row', marginBottom: 15, marginTop: 15 }}>\n              <YAxis\n                  data={data}\n                  contentInset={{ top: 10, bottom: 10 }}\n                  svg={axesSvg}\n                  numberOfTicks={ 6 }\n              />\n              <View style={{ flex: 1, marginLeft: 10 }}>\n                <AreaChart\n                  style={{ height: 200 }}\n                  data={data}\n                  contentInset={{ top: 10, bottom: 10 }}\n                  curve={shape.curveNatural}\n                  svg={{ fill: 'url(#gradient)' }}\n                  >\n                  <CustomGrid/>\n                  <Line/>\n                  <Gradient/>\n                </AreaChart>\n                  <XAxis\n                      style={{ marginHorizontal: -10, marginTop: 5}}\n                      data={data}\n                      formatLabel={(value, index) => index + 1 }\n                      contentInset={{ left: 10, right: 10 }}\n                      svg={axesSvg}\n                      numberOfTicks={ 15 }\n                  />\n              </View>\n          </View>\n\n          <View style={styles.buttonsContainer}>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>\n                Week\n              </Text>\n            </View>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>\n                Month\n              </Text>\n            </View>\n            <View style={styles.button}>\n              <Text style={styles.buttonText}>\n                Year\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    );\n    }\n    else{\n      return(\n        <View style={styles.container}>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    backgroundColor: '#e9f0ff',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingTop: 30\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    borderRadius: 20,\n    padding: 20,\n    textAlign: 'left'\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: 20\n  },\n  button: {\n    backgroundColor: '#2970ff',\n    borderRadius: 20,\n    padding: 10,\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  buttonText: {\n    fontFamily: 'Poppins_400Regular',\n    fontSize: 15,\n    color: '#ffffff'\n  }\n});*/"]},"metadata":{},"sourceType":"script"}
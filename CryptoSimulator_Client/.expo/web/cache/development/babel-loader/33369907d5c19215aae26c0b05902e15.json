{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Statistics.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport Autocomplete from 'react-native-autocomplete-input';\nexport default function Statistics() {\n  var _this = this;\n\n  var _useFonts = useFonts({\n    Poppins_300Light: Poppins_300Light,\n    Poppins_400Regular: Poppins_400Regular,\n    Poppins_600SemiBold: Poppins_600SemiBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      films = _useState2[0],\n      setFilms = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filteredFilms = _useState4[0],\n      setFilteredFilms = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedValue = _useState6[0],\n      setSelectedValue = _useState6[1];\n\n  useEffect(function () {\n    fetch('https://aboutreact.herokuapp.com/getpost.php?offset=1').then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      var films = json.results;\n      setFilms(films);\n    }).catch(function (e) {\n      alert(e);\n    });\n  }, []);\n\n  var findFilm = function findFilm(query) {\n    if (query) {\n      var regex = new RegExp(\"\" + query.trim(), 'i');\n      setFilteredFilms(films.filter(function (film) {\n        return film.title.search(regex) >= 0;\n      }));\n    } else {\n      setFilteredFilms([]);\n    }\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, React.createElement(View, {\n    style: styles.titleWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Predict the future of your cryptos\")), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(Autocomplete, {\n    inputContainerStyle: styles.inputContainer,\n    style: styles.autocomplete,\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    containerStyle: styles.autocompleteContainer,\n    data: filteredFilms,\n    defaultValue: JSON.stringify(selectedValue) === '{}' ? '' : selectedValue.title,\n    onChangeText: function onChangeText(text) {\n      return findFilm(text);\n    },\n    placeholder: \"Enter the film title\",\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableOpacity, {\n        style: styles.searchContainer,\n        onPress: function onPress() {\n          setSelectedValue(item);\n          setFilteredFilms([]);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.itemText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, item.title));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.descriptionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, films.length > 0 ? React.createElement(React.Fragment, null, React.createElement(Text, {\n    style: styles.infoText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Selected Data\"), React.createElement(Text, {\n    style: styles.infoText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, JSON.stringify(selectedValue))) : React.createElement(Text, {\n    style: styles.infoText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Enter The Film Title\"))));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  titleWrapper: {\n    height: '10%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#ffffff'\n  },\n  autocomplete: {\n    height: 40,\n    color: '#fff'\n  },\n  autocompleteContainer: {\n    backgroundColor: '#111111',\n    width: '40%',\n    height: 40,\n    color: '#fff',\n    borderWidth: 0,\n    borderRadius: 10\n  },\n  inputContainer: {\n    backgroundColor: '#111111',\n    borderRadius: 20,\n    width: '100%',\n    height: 40,\n    color: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  searchContainer: {\n    backgroundColor: '#111111',\n    width: '100%'\n  },\n  descriptionContainer: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  itemText: {\n    textAlign: 'center',\n    backgroundColor: '#111111',\n    fontSize: 20,\n    color: '#fff',\n    paddingTop: 10,\n    paddingBottom: 10,\n    margin: 5\n  },\n  infoText: {\n    textAlign: 'center',\n    fontSize: 16,\n    color: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Statistics.js"],"names":["StatusBar","React","useState","useEffect","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_600SemiBold","AppLoading","Autocomplete","Statistics","fontsLoaded","films","setFilms","filteredFilms","setFilteredFilms","selectedValue","setSelectedValue","fetch","then","res","json","results","catch","e","alert","findFilm","query","regex","RegExp","trim","filter","film","title","search","flex","backgroundColor","styles","titleWrapper","text","container","inputContainer","autocomplete","autocompleteContainer","JSON","stringify","item","searchContainer","itemText","descriptionContainer","length","infoText","StyleSheet","create","alignItems","justifyContent","height","fontFamily","fontSize","color","width","borderWidth","borderRadius","textAlign","paddingTop","paddingBottom","margin"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAO,8BAAP;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;AAEA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,kBAArC,EAAyDC,mBAAzD,QAAmF,4BAAnF;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AAAA,kBACfN,QAAQ,CAAC;AAC3BC,IAAAA,gBAAgB,EAAhBA,gBAD2B;AAE3BC,IAAAA,kBAAkB,EAAlBA,kBAF2B;AAG3BC,IAAAA,mBAAmB,EAAnBA;AAH2B,GAAD,CADO;AAAA;AAAA,MAC9BI,WAD8B;;AAAA,kBAQXT,QAAQ,CAAC,EAAD,CARG;AAAA;AAAA,MAQ9BU,KAR8B;AAAA,MAQvBC,QARuB;;AAAA,mBAWKX,QAAQ,CAAC,EAAD,CAXb;AAAA;AAAA,MAW9BY,aAX8B;AAAA,MAWfC,gBAXe;;AAAA,mBAcKb,QAAQ,CAAC,EAAD,CAdb;AAAA;AAAA,MAc9Bc,aAd8B;AAAA,MAcfC,gBAde;;AAgBrCd,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,KAAK,CAAC,uDAAD,CAAL,CACGC,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU;AAAA,UACET,KADF,GACWS,IADX,CACPC,OADO;AAEdT,MAAAA,QAAQ,CAACD,KAAD,CAAR;AAED,KANH,EAOGW,KAPH,CAOS,UAACC,CAAD,EAAO;AACZC,MAAAA,KAAK,CAACD,CAAD,CAAL;AACD,KATH;AAUD,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAE1B,QAAIA,KAAJ,EAAW;AAET,UAAMC,KAAK,GAAG,IAAIC,MAAJ,MAAcF,KAAK,CAACG,IAAN,EAAd,EAA8B,GAA9B,CAAd;AAEAf,MAAAA,gBAAgB,CACZH,KAAK,CAACmB,MAAN,CAAa,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,KAAL,CAAWC,MAAX,CAAkBN,KAAlB,KAA4B,CAAtC;AAAA,OAAb,CADY,CAAhB;AAGD,KAPD,MAOO;AAELb,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GAbD;;AAeA,SACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE;AAACoB,MAAAA,IAAI,EAAE,CAAP;AAAUC,MAAAA,eAAe,EAAC;AAA1B,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADJ,CADF,EAME,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AACA,IAAA,mBAAmB,EAAEH,MAAM,CAACI,cAD5B;AAEA,IAAA,KAAK,EAAEJ,MAAM,CAACK,YAFd;AAGE,IAAA,cAAc,EAAC,MAHjB;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,cAAc,EAAEL,MAAM,CAACM,qBALzB;AAOE,IAAA,IAAI,EAAE7B,aAPR;AASE,IAAA,YAAY,EACV8B,IAAI,CAACC,SAAL,CAAe7B,aAAf,MAAkC,IAAlC,GACA,EADA,GAEAA,aAAa,CAACiB,KAZlB;AAiBE,IAAA,YAAY,EAAE,sBAACM,IAAD;AAAA,aAAUb,QAAQ,CAACa,IAAD,CAAlB;AAAA,KAjBhB;AAkBE,IAAA,WAAW,EAAC,sBAlBd;AAmBE,IAAA,UAAU,EAAE;AAAA,UAAEO,IAAF,QAAEA,IAAF;AAAA,aAEV,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAET,MAAM,CAACU,eADhB;AAEE,QAAA,OAAO,EAAE,mBAAM;AACb9B,UAAAA,gBAAgB,CAAC6B,IAAD,CAAhB;AACA/B,UAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEsB,MAAM,CAACW,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,IAAI,CAACb,KADV,CANF,CAFU;AAAA,KAnBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAkCE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACY,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrC,KAAK,CAACsC,MAAN,GAAe,CAAf,GACC,0CACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACc,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACc,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,IAAI,CAACC,SAAL,CAAe7B,aAAf,CADH,CAJF,CADD,GAUC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEqB,MAAM,CAACc,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAXJ,CAlCF,CANF,CADF;AA4DC;AAAA;AAED,IAAMd,MAAM,GAAGe,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,SAAS,EAAE;AACTL,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTkB,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BjB,EAAAA,YAAY,EAAC;AACXkB,IAAAA,MAAM,EAAC,KADI;AAEXF,IAAAA,UAAU,EAAC,QAFA;AAGXC,IAAAA,cAAc,EAAC;AAHJ,GAPkB;AAa/BhB,EAAAA,IAAI,EAAE;AACJkB,IAAAA,UAAU,EAAE,qBADR;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,KAAK,EAAE;AAHH,GAbyB;AAkB/BjB,EAAAA,YAAY,EAAC;AACXc,IAAAA,MAAM,EAAC,EADI;AAEXG,IAAAA,KAAK,EAAC;AAFK,GAlBkB;AAsB/BhB,EAAAA,qBAAqB,EAAE;AACrBP,IAAAA,eAAe,EAAE,SADI;AAErBwB,IAAAA,KAAK,EAAC,KAFe;AAGrBJ,IAAAA,MAAM,EAAC,EAHc;AAIrBG,IAAAA,KAAK,EAAC,MAJe;AAKrBE,IAAAA,WAAW,EAAE,CALQ;AAMrBC,IAAAA,YAAY,EAAC;AANQ,GAtBQ;AA8B/BrB,EAAAA,cAAc,EAAC;AACbL,IAAAA,eAAe,EAAC,SADH;AAEb0B,IAAAA,YAAY,EAAC,EAFA;AAGbF,IAAAA,KAAK,EAAC,MAHO;AAIbJ,IAAAA,MAAM,EAAC,EAJM;AAKbG,IAAAA,KAAK,EAAC,MALO;AAMbL,IAAAA,UAAU,EAAC,QANE;AAObC,IAAAA,cAAc,EAAC;AAPF,GA9BgB;AAuC/BR,EAAAA,eAAe,EAAC;AACdX,IAAAA,eAAe,EAAE,SADH;AAEdwB,IAAAA,KAAK,EAAC;AAFQ,GAvCe;AA2C/BX,EAAAA,oBAAoB,EAAE;AACpBd,IAAAA,IAAI,EAAE,CADc;AAEpBoB,IAAAA,cAAc,EAAE;AAFI,GA3CS;AA+C/BP,EAAAA,QAAQ,EAAE;AACRe,IAAAA,SAAS,EAAC,QADF;AAER3B,IAAAA,eAAe,EAAE,SAFT;AAGRsB,IAAAA,QAAQ,EAAE,EAHF;AAIRC,IAAAA,KAAK,EAAC,MAJE;AAKRK,IAAAA,UAAU,EAAE,EALJ;AAMRC,IAAAA,aAAa,EAAE,EANP;AAORC,IAAAA,MAAM,EAAE;AAPA,GA/CqB;AAwD/Bf,EAAAA,QAAQ,EAAE;AACRY,IAAAA,SAAS,EAAE,QADH;AAERL,IAAAA,QAAQ,EAAE,EAFF;AAGRC,IAAAA,KAAK,EAAC;AAHE;AAxDqB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport 'react-native-gesture-handler';\nimport React, {useState, useEffect} from 'react';\nimport { StyleSheet, Text, View, SafeAreaView, TouchableOpacity} from 'react-native';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport Autocomplete from 'react-native-autocomplete-input';\n\nexport default function Statistics() {\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_600SemiBold\n  });\n\n// For Main Data\nconst [films, setFilms] = useState([]);\n\n// For Filtered Data\nconst [filteredFilms, setFilteredFilms] = useState([]);\n\n// For Selected Data\nconst [selectedValue, setSelectedValue] = useState({});\n\nuseEffect(() => {\n  fetch('https://aboutreact.herokuapp.com/getpost.php?offset=1')\n    .then((res) => res.json())\n    .then((json) => {\n      const {results: films} = json;\n      setFilms(films);\n      //setting the data in the films state\n    })\n    .catch((e) => {\n      alert(e);\n    });\n}, []);\n\nconst findFilm = (query) => {\n  // Method called every time when we change the value of the input\n  if (query) {\n    // Making a case insensitive regular expression\n    const regex = new RegExp(`${query.trim()}`, 'i');\n    // Setting the filtered film array according the query\n    setFilteredFilms(\n        films.filter((film) => film.title.search(regex) >= 0)\n    );\n  } else {\n    // If the query is null then return blank\n    setFilteredFilms([]);\n  }\n};\n\nreturn (\n  <SafeAreaView style={{flex: 1, backgroundColor:'#000'}}>\n    <View style={styles.titleWrapper}>\n        <Text style={styles.text}>\n            Predict the future of your cryptos\n        </Text>\n    </View>\n    <View style={styles.container}>\n      <Autocomplete\n      inputContainerStyle={styles.inputContainer}\n      style={styles.autocomplete}\n        autoCapitalize=\"none\"\n        autoCorrect={false}// da non mettere a true, Ã¨ il correttore automatico della tastiera\n        containerStyle={styles.autocompleteContainer}\n        // Data to show in suggestion\n        data={filteredFilms}\n        // Default value if you want to set something in input\n        defaultValue={\n          JSON.stringify(selectedValue) === '{}' ?\n          '' :\n          selectedValue.title\n        }\n        // Onchange of the text changing the state of the query\n        // Which will trigger the findFilm method\n        // To show the suggestions\n        onChangeText={(text) => findFilm(text)}\n        placeholder=\"Enter the film title\"\n        renderItem={({item}) => (\n          // For the suggestion view\n          <TouchableOpacity\n            style={styles.searchContainer}\n            onPress={() => {\n              setSelectedValue(item);\n              setFilteredFilms([]);\n            }}>\n            <Text style={styles.itemText}>\n                {item.title}\n            </Text>\n          </TouchableOpacity>\n        )}\n      />\n      <View style={styles.descriptionContainer}>\n        {films.length > 0 ? (\n          <>\n            <Text style={styles.infoText}>\n                 Selected Data\n            </Text>\n            <Text style={styles.infoText}>\n              {JSON.stringify(selectedValue)}\n            </Text>\n          </>\n        ) : (\n          <Text style={styles.infoText}>\n              Enter The Film Title\n          </Text>\n        )}\n      </View>\n    </View>\n  </SafeAreaView>\n);\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  titleWrapper:{\n    height:'10%',\n    alignItems:'center',\n    justifyContent:'center',\n  },\n\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#ffffff'\n  },\n  autocomplete:{\n    height:40,\n    color:'#fff',\n  },\n  autocompleteContainer: {\n    backgroundColor: '#111111',\n    width:'40%',\n    height:40,\n    color:'#fff',\n    borderWidth: 0,\n    borderRadius:10,\n  },\n  inputContainer:{\n    backgroundColor:'#111111',\n    borderRadius:20,\n    width:'100%',\n    height:40,\n    color:'#fff',\n    alignItems:'center',\n    justifyContent:'center',\n  },\n  searchContainer:{\n    backgroundColor: '#111111',\n    width:'100%'\n  },\n  descriptionContainer: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  itemText: {\n    textAlign:'center',\n    backgroundColor: '#111111',\n    fontSize: 20,\n    color:'#fff',\n    paddingTop: 10,\n    paddingBottom: 10,\n    margin: 5,\n  },\n  infoText: {\n    textAlign: 'center',\n    fontSize: 16,\n    color:'#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
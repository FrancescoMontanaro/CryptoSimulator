{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/PriceViewer.js\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nexport default function PriceViewer(props) {\n  var swipeIndex = props.swipeIndex;\n  var data = props.data;\n\n  var _useFonts = useFonts({\n    Poppins_300Light: Poppins_300Light,\n    Poppins_400Regular: Poppins_400Regular,\n    Poppins_500Medium: Poppins_500Medium,\n    Poppins_600SemiBold: Poppins_600SemiBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!fontsLoaded) {} else {\n    if (swipeIndex >= 0 && swipeIndex <= data.length) {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.currentPrice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }\n      }, parsePrice(data[swipeIndex][1])), React.createElement(Text, {\n        style: styles.currentDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }\n      }, getDate(data[swipeIndex][0])));\n    } else {\n      return null;\n    }\n  }\n}\n;\nvar styles = StyleSheet.create({\n  currentPrice: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 18,\n    color: '#000000',\n    margin: 0\n  },\n  currentDate: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000',\n    margin: 0\n  }\n});\n\nfunction getDate(timestamp) {\n  var date = new Date(timestamp);\n  var textDate = days[date.getDay()] + \" \" + date.getDate() + \" \" + months[date.getMonth()] + \" \" + date.getFullYear();\n  return textDate;\n}\n\nfunction parsePrice(price) {\n  price = price.toFixed(2);\n  var integer = String(Math.trunc(price));\n  var decimal = price.split(\".\")[1];\n\n  if (integer.length > 3) {\n    integer = [integer.slice(0, integer.length - 3), \".\", integer.slice(integer.length - 3)].join('');\n  }\n\n  return integer + \",\" + decimal + \"$\";\n}","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/PriceViewer.js"],"names":["React","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","PriceViewer","props","swipeIndex","data","fontsLoaded","length","styles","currentPrice","parsePrice","currentDate","getDate","StyleSheet","create","fontFamily","fontSize","color","margin","timestamp","date","Date","textDate","days","getDay","months","getMonth","getFullYear","price","toFixed","integer","String","Math","trunc","decimal","split","slice","join"],"mappings":"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","sourcesContent":["import {Text, View} from 'react-native';\nimport React from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\n\nexport default function PriceViewer(props){\n    const swipeIndex = props.swipeIndex;\n    const data = props.data;\n    let [fontsLoaded] = useFonts({\n        Poppins_300Light,\n        Poppins_400Regular,\n        Poppins_500Medium,\n        Poppins_600SemiBold\n    });\n\n    if (!fontsLoaded) {\n\n    }\n    else{\n        if(swipeIndex >= 0 && swipeIndex <= data.length){\n            return(\n                <View>\n                    <Text style={styles.currentPrice}>{parsePrice(data[swipeIndex][1])}</Text>\n                    <Text style={styles.currentDate}>{getDate(data[swipeIndex][0])}\n                    </Text>\n                </View>\n            )\n        }\n        else{\n            return(null);\n        }\n    }\n};\n\nconst styles = StyleSheet.create({\n    currentPrice: {\n        fontFamily: 'Poppins_500Medium',\n        fontSize: 18,\n        color: '#000000',\n        margin: 0\n    },\n    currentDate: {\n        fontFamily: 'Poppins_500Medium',\n        fontSize: 12,\n        color: '#000000',\n        margin: 0\n    },\n})\n\n\nfunction getDate(timestamp){\n    var date = new Date(timestamp);\n    var textDate = days[date.getDay()] + \" \" + date.getDate() + \" \" + months[date.getMonth()] + \" \" + date.getFullYear();\n    return textDate;\n}\n\n\nfunction parsePrice(price){\n    price = price.toFixed(2);\n    var integer = String(Math.trunc(price));\n    var decimal = price.split(\".\")[1];\n    if(integer.length > 3){\n        integer = [integer.slice(0, (integer.length - 3)), \".\", integer.slice((integer.length - 3))].join('');\n    }\n    return integer + \",\" + decimal + \"$\";\n}"]},"metadata":{},"sourceType":"module"}
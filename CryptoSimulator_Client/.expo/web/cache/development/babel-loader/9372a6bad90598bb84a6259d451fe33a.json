{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/App.js\";\nimport 'react-native-gesture-handler';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React, { useState, useEffect } from 'react';\nimport { AppLoading } from 'expo';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Predictions from \"./components/Predictions\";\nimport Account from \"./components/Account\";\nimport Charts from \"./components/Charts\";\nimport MyTabBar from \"./components/MyTabBar\";\nimport apiKeys from \"./APIs/config\";\nimport * as firebase from 'firebase';\nvar Tab = createBottomTabNavigator();\nvar colorScheme = \"dark\";\nvar endDate = new Date();\nendDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1) + \"-\" + endDate.getDate();\nvar startDate = new Date(new Date().getTime() - 3 * 365 * 24 * 60 * 60 * 1000);\nstartDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getDate();\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cryptoData = _useState2[0],\n      setCryptoData = _useState2[1];\n\n  var dataLoaded = false;\n\n  var _useFonts = useFonts({\n    Poppins_300Light: Poppins_300Light,\n    Poppins_400Regular: Poppins_400Regular,\n    Poppins_500Medium: Poppins_500Medium,\n    Poppins_600SemiBold: Poppins_600SemiBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(apiKeys.firebaseConfig);\n  }\n\n  useEffect(function () {\n    firebase.functions().httpsCallable('getCryptoData')({\n      assets: ['BTC', 'ETH', 'LTC', 'ADA', 'XLM'],\n      start: startDate,\n      end: endDate,\n      interval: '1d'\n    }).then(function (response) {\n      if (response.data.statusCode == 200) {\n        setCryptoData(response.data.body);\n        dataLoaded = true;\n      } else {\n        console.error(response.data.body);\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }, []);\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return React.createElement(NavigationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, React.createElement(Tab.Navigator, {\n      initialRouteName: \"Charts\",\n      tabBar: function tabBar(props) {\n        return React.createElement(MyTabBar, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 67\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, React.createElement(Tab.Screen, {\n      name: \"Charts\",\n      children: function children() {\n        return React.createElement(Charts, {\n          colorScheme: colorScheme,\n          cryptoData: cryptoData,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 54\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), React.createElement(Tab.Screen, {\n      name: \"Predictions\",\n      children: function children() {\n        return React.createElement(Predictions, {\n          colorScheme: colorScheme,\n          cryptoData: cryptoData,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 59\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), React.createElement(Tab.Screen, {\n      name: \"Account\",\n      children: function children() {\n        return React.createElement(Account, {\n          colorScheme: colorScheme,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 55\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/App.js"],"names":["useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","createBottomTabNavigator","React","useState","useEffect","AppLoading","NavigationContainer","Predictions","Account","Charts","MyTabBar","apiKeys","firebase","Tab","colorScheme","endDate","Date","getFullYear","getMonth","getDate","startDate","getTime","App","cryptoData","setCryptoData","dataLoaded","fontsLoaded","apps","length","initializeApp","firebaseConfig","functions","httpsCallable","assets","start","end","interval","then","response","data","statusCode","body","console","error","catch","props"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React, {useState, useEffect} from 'react';\nimport { AppLoading } from 'expo';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Predictions from './components/Predictions';\nimport Account from './components/Account';\nimport Charts from './components/Charts';\nimport MyTabBar from './components/MyTabBar';\nimport apiKeys from './APIs/config';\nimport * as firebase from 'firebase';\n\nconst Tab = createBottomTabNavigator();\nconst colorScheme = \"dark\";\n\nvar endDate = new Date();\nendDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1) + \"-\" + endDate.getDate();\n\nvar startDate = new Date((new Date()).getTime() - 3*365*24*60*60*1000);\nstartDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getDate();\n\n\nexport default function App() {\n  const [cryptoData, setCryptoData] = useState([]);\n  var dataLoaded = false;\n\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n  \n  if (!firebase.apps.length) {\n    firebase.initializeApp(apiKeys.firebaseConfig);\n  }\n\n  useEffect(()=>{\n    firebase.functions().httpsCallable('getCryptoData')({assets: ['BTC', 'ETH', 'LTC', 'ADA', 'XLM'], start: startDate, end: endDate, interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        dataLoaded = true;\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  },[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    return (\n      <NavigationContainer>\n        <Tab.Navigator initialRouteName=\"Charts\" tabBar={props => <MyTabBar {...props} />}>\n          <Tab.Screen name=\"Charts\" children={() => (<Charts colorScheme={colorScheme} cryptoData={cryptoData}/>)}/>\n          <Tab.Screen name=\"Predictions\" children={() => (<Predictions colorScheme={colorScheme} cryptoData={cryptoData}/>)} />\n          <Tab.Screen name=\"Account\" children={() => (<Account colorScheme={colorScheme}/>)} />\n        </Tab.Navigator>\n      </NavigationContainer>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
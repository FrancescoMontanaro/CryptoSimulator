{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/francescomontanaro/Desktop/Universita\\u0300/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport 'react-native-gesture-handler';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { useState, useEffect } from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase';\nimport \"firebase/functions\";\nimport { AreaChart, Grid, LineChart } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\nimport { Defs, LinearGradient, Stop, Path, G, Line, Circle } from 'react-native-svg';\n\nvar ExtrasExample = function (_React$PureComponent) {\n  _inherits(ExtrasExample, _React$PureComponent);\n\n  var _super = _createSuper(ExtrasExample);\n\n  function ExtrasExample() {\n    _classCallCheck(this, ExtrasExample);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExtrasExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var data = [50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80];\n\n      var HorizontalLine = function HorizontalLine(_ref) {\n        var y = _ref.y;\n        return React.createElement(Line, {\n          key: 'zero-axis',\n          x1: '0%',\n          x2: '100%',\n          y1: y(50),\n          y2: y(50),\n          stroke: 'grey',\n          strokeDasharray: [4, 8],\n          strokeWidth: 2,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }\n        });\n      };\n\n      var Tooltip = function Tooltip(_ref2) {\n        var x = _ref2.x,\n            y = _ref2.y;\n        return React.createElement(G, {\n          x: x(5) - 75 / 2,\n          key: 'tooltip',\n          onPress: function onPress() {\n            return console.log('tooltip clicked');\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 11\n          }\n        }, React.createElement(G, {\n          y: 50,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }\n        }, React.createElement(Rect, {\n          height: 40,\n          width: 75,\n          stroke: 'grey',\n          fill: 'white',\n          ry: 10,\n          rx: 10,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 19\n          }\n        }), React.createElement(Text, {\n          x: 75 / 2,\n          dy: 20,\n          alignmentBaseline: 'middle',\n          textAnchor: 'middle',\n          stroke: 'rgb(134, 65, 244)',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 19\n          }\n        }, data[5] + \"\\xBAC\")), React.createElement(G, {\n          x: 75 / 2,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }\n        }, React.createElement(Line, {\n          y1: 50 + 40,\n          y2: y(data[5]),\n          stroke: 'grey',\n          strokeWidth: 2,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 19\n          }\n        }), React.createElement(Circle, {\n          cy: y(data[5]),\n          r: 6,\n          stroke: 'rgb(134, 65, 244)',\n          strokeWidth: 2,\n          fill: 'white',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 19\n          }\n        })));\n      };\n\n      return React.createElement(LineChart, {\n        style: {\n          height: 200\n        },\n        data: data,\n        svg: {\n          stroke: 'rgb(134, 65, 244)',\n          strokeWidth: 2\n        },\n        contentInset: {\n          top: 20,\n          bottom: 20\n        },\n        curve: shape.curveLinear,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }\n      }, React.createElement(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }\n      }), React.createElement(HorizontalLine, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }\n      }), React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }\n      }));\n    }\n  }]);\n\n  return ExtrasExample;\n}(React.PureComponent);\n\nexport default ExtrasExample;","map":{"version":3,"sources":["/Users/francescomontanaro/Desktop/UniversitaÌ€/Corsi/Design and Implementation of Mobile Applications/CryptoSimulator_Client/components/Predictions.js"],"names":["React","useState","useEffect","useFonts","Poppins_300Light","Poppins_400Regular","Poppins_500Medium","Poppins_600SemiBold","AppLoading","firebase","AreaChart","Grid","LineChart","shape","Defs","LinearGradient","Stop","Path","G","Line","Circle","ExtrasExample","data","HorizontalLine","y","Tooltip","x","console","log","height","stroke","strokeWidth","top","bottom","curveLinear","PureComponent"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport { StyleSheet, Text, View, ScrollView } from 'react-native';\nimport React, {useState,useEffect} from 'react';\nimport { useFonts, Poppins_300Light, Poppins_400Regular, Poppins_500Medium, Poppins_600SemiBold} from '@expo-google-fonts/poppins';\nimport { AppLoading } from 'expo';\nimport * as firebase from 'firebase'\nimport \"firebase/functions\";\nimport { AreaChart, Grid, LineChart} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport { Defs, LinearGradient, Stop, Path, G, Line, Circle } from 'react-native-svg'\n\n/*\nexport default function Predictions() {\n  const [loading, setLoading] = useState(true);\n  const [cryptoData, setCryptoData] = useState({});\n  let [fontsLoaded] = useFonts({\n    Poppins_300Light,\n    Poppins_400Regular,\n    Poppins_500Medium,\n    Poppins_600SemiBold\n  });\n\n  useEffect(()=>{\n    if(loading && !fontsLoaded){\n    firebase.functions().httpsCallable('getCryptoData')({asset: 'bitcoin', start: '2020-01-01', end: '2020-02-01', interval: '1d'}).then(response =>{\n      if(response.data.statusCode == 200){\n        setCryptoData(response.data.body);\n        setLoading(false);\n      }\n      else{\n        console.error(response.data.body);\n      }\n    }).catch(error =>{\n      console.error(error);\n    })\n  }},[])\n\n  if (!fontsLoaded) {\n    return <AppLoading/>;\n  }\n  else{\n    if(!loading){\n      let data = [];\n      (cryptoData.values).forEach(sample =>{\n        data.push(sample[4]);\n      })\n\n      const axesSvg = { fontSize: 10, fill: 'grey', fontFamily:  'Poppins_400Regular'};\n\n      const ChartLine = ({ line }) => (\n        <Path\n            key={'line'}\n            d={line}\n            stroke={'rgb(41, 114, 255)'}\n            fill={'none'}\n        />\n      )\n    \n      const Gradient = ({ index }) => (\n        <Defs key={index}>\n            <LinearGradient id={'gradient'} x1={'0%'} y1={'0%'} x2={'0%'} y2={'100%'}>\n                <Stop offset={'0%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0.2}/>\n                <Stop offset={'28%'} stopColor={'rgb(41, 114, 255)'} stopOpacity={0}/>\n            </LinearGradient>\n        </Defs>\n      )\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.chartContainer}>\n          <Text style={styles.cryptoSymbol}>{cryptoData.symbol}</Text>\n          <Text style={styles.cryptoName}>{cryptoData.name}</Text>\n\n          <View style={{ height: 120, flexDirection: 'row', marginBottom: 15, marginTop: 15 }}>\n              <View style={{ flex: 1, marginLeft: 10 }}>\n                <AreaChart\n                  style={{ height: 120 }}\n                  data={data}\n                  contentInset={{ top: 10, bottom: 10 }}\n                  curve={shape.curveNatural}\n                  svg={{ fill: 'url(#gradient)' }}\n                  >\n                  <ChartLine/>\n                  <Gradient/>\n                </AreaChart>\n              </View>\n          </View>\n\n          <View style={{flex: 1, alignItems: 'center', marginTop: 20}}>\n            <View style={styles.buttonsContainer}>\n            <Text style={styles.buttonText}>\n              1D\n            </Text>\n            <Text style={styles.buttonText}>\n              1W\n            </Text>\n            <Text style={styles.buttonText}>\n              1M\n            </Text>\n            <Text style={styles.buttonText}>\n              1Y\n            </Text>\n            <Text style={styles.buttonText}>\n              ALL\n            </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    );\n    }\n    else{\n      return(\n        <View style={styles.container}>\n          <Text style={styles.text}>\n              LOADING...\n          </Text>\n        </View>\n      );\n    }\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    backgroundColor: '#e9f0ff',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingTop: 30\n  },\n  chartContainer: {\n    backgroundColor: '#ffffff',\n    width: '90%',\n    borderRadius: 20,\n    padding: 20,\n    textAlign: 'left',\n    marginBottom: 20\n  },\n  cryptoSymbol: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 25,\n    color: '#000000'\n  },\n  cryptoName: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 20,\n    color: '#000000'\n  },\n  text: {\n    fontFamily: 'Poppins_600SemiBold',\n    fontSize: 30,\n    color: '#000000'\n  },\n  buttonsContainer: {\n    width: '80%', \n    flexDirection: 'row', \n    justifyContent: 'space-between'\n  },\n  buttonText: {\n    fontFamily: 'Poppins_500Medium',\n    fontSize: 12,\n    color: '#000000'\n  }\n});*/\n\nclass ExtrasExample extends React.PureComponent {\n\n  render() {\n\n      const data = [ 50, 10, 40, 95, -4, -24, 85, 91, 35, 53, -53, 24, 50, -20, -80 ]\n\n      /**\n       * Both below functions should preferably be their own React Components\n       */\n\n      const HorizontalLine = (({ y }) => (\n          <Line\n              key={ 'zero-axis' }\n              x1={ '0%' }\n              x2={ '100%' }\n              y1={ y(50) }\n              y2={ y(50) }\n              stroke={ 'grey' }\n              strokeDasharray={ [ 4, 8 ] }\n              strokeWidth={ 2 }\n          />\n      ))\n\n      const Tooltip = ({ x, y }) => (\n          <G\n              x={ x(5) - (75 / 2) }\n              key={ 'tooltip' }\n              onPress={ () => console.log('tooltip clicked') }\n          >\n              <G y={ 50 }>\n                  <Rect\n                      height={ 40 }\n                      width={ 75 }\n                      stroke={ 'grey' }\n                      fill={ 'white' }\n                      ry={ 10 }\n                      rx={ 10 }\n                  />\n                  <Text\n                      x={ 75 / 2 }\n                      dy={ 20 }\n                      alignmentBaseline={ 'middle' }\n                      textAnchor={ 'middle' }\n                      stroke={ 'rgb(134, 65, 244)' }\n                  >\n                      { `${data[5]}ÂºC` }\n                  </Text>\n              </G>\n              <G x={ 75 / 2 }>\n                  <Line\n                      y1={ 50 + 40 }\n                      y2={ y(data[ 5 ]) }\n                      stroke={ 'grey' }\n                      strokeWidth={ 2 }\n                  />\n                  <Circle\n                      cy={ y(data[ 5 ]) }\n                      r={ 6 }\n                      stroke={ 'rgb(134, 65, 244)' }\n                      strokeWidth={ 2 }\n                      fill={ 'white' }\n                  />\n              </G>\n          </G>\n      )\n\n      return (\n          <LineChart\n              style={{ height: 200 }}\n              data={ data }\n              svg={{\n                  stroke: 'rgb(134, 65, 244)',\n                  strokeWidth: 2,\n              }}\n              contentInset={{ top: 20, bottom: 20 }}\n              curve={ shape.curveLinear }\n          >\n              <Grid/>\n              <HorizontalLine/>\n              <Tooltip/>\n          </LineChart>\n      )\n  }\n\n}\n\nexport default ExtrasExample\n"]},"metadata":{},"sourceType":"module"}